---
interface Course {
    name: string;
    duration: string;
    period?: string;
}

interface Certification {
    title: string;
    duration: string;
    courses: Course[];
}

interface Props {
    skill: string;
    certifications: Certification[];
}

const { skill, certifications } = Astro.props;
const popupId = `popup-${skill.toLowerCase().replace(/[^a-z0-9]/g, '-')}`;
---

<dialog 
    id={popupId} 
    class="skill-popup"
    aria-labelledby={`${popupId}-title`}
>
    <div class="popup-content" role="document">
        <div class="popup-header">
            <h3 id={`${popupId}-title`}>Certificações em {skill}</h3>
            <button 
                class="close-button" 
                onclick={`closePopup('${popupId}')`}
                aria-label="Fechar popup"
            >
                <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <line x1="18" y1="6" x2="6" y2="18"></line>
                    <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
            </button>
        </div>
        <div class="certifications-list">
            {certifications.map((cert, index) => (
                <div 
                    class="certification-item"
                    role="article"
                    tabindex="0"
                >
                    <div class="cert-header">
                        <h4>{cert.title}</h4>
                        <span class="duration" aria-label={`Duração: ${cert.duration}`}>
                            {cert.duration}
                        </span>
                    </div>
                    <div class="courses">
                        {cert.courses.map(course => (
                            <div class="course" role="listitem">
                                <div class="course-info">
                                    <span class="course-name">{course.name}</span>
                                    {course.period && (
                                        <span class="course-period">({course.period})</span>
                                    )}
                                </div>
                                <span class="course-duration">{course.duration}</span>
                            </div>
                        ))}
                    </div>
                </div>
            ))}
        </div>
    </div>
</dialog>

<style>
.skill-popup {
    position: fixed;
    max-width: 800px;
    width: 95%;
    margin: 1rem auto;
    padding: 0;
    border: none;
    border-radius: 12px;
    background: var(--secondary-color);
    color: var(--text-color);
    overflow: hidden;
}

.skill-popup::backdrop {
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(4px);
}

.popup-content {
    padding: 2rem;
    max-height: 85vh;
    overflow-y: auto;
    overscroll-behavior: contain;
}

.popup-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 2rem;
    position: sticky;
    top: 0;
    background: var(--secondary-color);
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--border-color);
    z-index: 1;
}

.close-button {
    background: none;
    border: none;
    color: var(--text-color);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s ease;
}

.close-button:hover,
.close-button:focus-visible {
    background: rgba(var(--text-color-rgb), 0.1);
}

h3 {
    font-size: 1.8rem;
    color: var(--primary-color);
    padding-right: 2rem;
    margin: 0;
}

.certification-item {
    background: rgba(var(--text-color-rgb), 0.05);
    border-radius: 8px;
    padding: 1.5rem;
    margin-bottom: 1rem;
    outline: none;
}

.certification-item:focus-visible {
    box-shadow: 0 0 0 2px var(--primary-color);
}

.cert-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 1rem;
    margin-bottom: 1rem;
}

h4 {
    font-size: 1.2rem;
    color: var(--text-color);
    line-height: 1.3;
    margin: 0;
}

.duration {
    color: var(--text-color-secondary);
    font-size: 0.9rem;
    white-space: nowrap;
    background: rgba(var(--text-color-rgb), 0.1);
    padding: 0.3rem 0.8rem;
    border-radius: 15px;
}

.courses {
    display: flex;
    flex-direction: column;
    gap: 0.8rem;
}

.course {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
    padding: 0.5rem;
    border-radius: 6px;
    background: rgba(var(--text-color-rgb), 0.05);
}

.course-info {
    flex: 1;
    min-width: 0;
}

.course-name {
    display: block;
    color: var(--text-color);
    font-size: 0.95rem;
}

.course-period {
    display: block;
    color: var(--text-color-secondary);
    font-size: 0.85rem;
    margin-top: 0.25rem;
}

.course-duration {
    color: var(--text-color-secondary);
    font-size: 0.9rem;
    white-space: nowrap;
}

@media (max-width: 768px) {
    .popup-content {
        padding: 1.5rem;
    }

    h3 {
        font-size: 1.5rem;
    }

    .certification-item {
        padding: 1rem;
    }

    .cert-header {
        flex-direction: column;
    }

    h4 {
        font-size: 1.1rem;
    }

    .course {
        flex-direction: column;
        gap: 0.5rem;
    }

    .course-duration {
        align-self: flex-start;
    }
}

@media (max-width: 480px) {
    .popup-content {
        padding: 1rem;
    }

    h3 {
        font-size: 1.3rem;
    }

    .certification-item {
        padding: 0.8rem;
    }

    .course-name {
        font-size: 0.9rem;
    }
}

@media (prefers-reduced-motion: reduce) {
    .skill-popup,
    .close-button {
        transition: none !important;
    }
}
</style>

<script>
function trapFocus(element: HTMLElement) {
    const focusableElements = element.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    const firstFocusable = focusableElements[0] as HTMLElement;
    const lastFocusable = focusableElements[focusableElements.length - 1] as HTMLElement;

    function handleTabKey(e: KeyboardEvent) {
        if (e.key !== 'Tab') return;

        if (e.shiftKey) {
            if (document.activeElement === firstFocusable) {
                lastFocusable.focus();
                e.preventDefault();
            }
        } else {
            if (document.activeElement === lastFocusable) {
                firstFocusable.focus();
                e.preventDefault();
            }
        }
    }

    return handleTabKey;
}

document.addEventListener('astro:page-load', () => {
    const dialogs = document.querySelectorAll('dialog');
    
    dialogs.forEach(dialog => {
        const closeBtn = dialog.querySelector('.close-button') as HTMLButtonElement;
        
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                dialog.close();
            });
        }

        dialog.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                dialog.close();
            }
            if (dialog.open) {
                trapFocus(dialog)(e);
            }
        });

        // Previnir scroll do body quando o dialog estiver aberto
        dialog.addEventListener('open', () => {
            document.body.style.overflow = 'hidden';
            closeBtn?.focus();
        });

        dialog.addEventListener('close', () => {
            document.body.style.overflow = '';
        });
    });
});

// Função global para abrir popup
window.openPopup = function(id: string) {
    const dialog = document.getElementById(id) as HTMLDialogElement;
    if (dialog) {
        dialog.showModal();
    }
};

// Função global para fechar popup
window.closePopup = function(id: string) {
    const dialog = document.getElementById(id) as HTMLDialogElement;
    if (dialog) {
        dialog.close();
    }
};
</script>