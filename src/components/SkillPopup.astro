---
interface Course {
    name: string;
    duration: string;
    period?: string;
}

interface Certification {
    title: string;
    duration: string;
    courses: Course[];
}

interface Props {
    skill: string;
    certifications: Certification[];
}

const { skill, certifications } = Astro.props;
const popupId = `popup-${skill.toLowerCase().replace(/[^a-z0-9]/g, '-')}`;
---

<dialog 
    id={popupId} 
    class="skill-popup"
    aria-labelledby={`${popupId}-title`}
>
    <div class="popup-content" role="document">
        <div class="popup-header">
            <h3 id={`${popupId}-title`}>Certificações em {skill}</h3>
            <button 
                class="close-button" 
                onclick={`closePopup('${popupId}')`}
                aria-label="Fechar popup"
            >
                <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <line x1="18" y1="6" x2="6" y2="18"></line>
                    <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
            </button>
        </div>
        <div class="certifications-list">
            {certifications.map((cert) => (
                <div 
                    class="certification-item"
                    role="article"
                    tabindex="0"
                >
                    <div class="cert-header">
                        <h4>{cert.title}</h4>
                        <span class="duration-badge" aria-label={`Duração: ${cert.duration}`}>
                            {cert.duration}
                        </span>
                    </div>
                    <div class="courses" role="list">
                        {cert.courses.map(course => (
                            <div class="course" role="listitem">
                                <div class="course-info">
                                    <span class="course-name">{course.name}</span>
                                    {course.period && (
                                        <span class="course-period">({course.period})</span>
                                    )}
                                </div>
                                <span class="course-duration">{course.duration}</span>
                            </div>
                        ))}
                    </div>
                </div>
            ))}
        </div>
    </div>
</dialog>

<style>
.skill-popup {
    position: fixed;
    max-width: min(800px, 95vw);
    width: 95%;
    margin: clamp(0.5rem, 2vw, 1rem) auto;
    padding: 0;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    background: var(--background-color);
    overflow: hidden;
    box-shadow: var(--card-shadow) rgba(var(--text-color-rgb), 0.1);
}

.skill-popup::backdrop {
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
    -webkit-backdrop-filter: blur(4px);
}

.popup-content {
    padding: clamp(1rem, 4vw, 2rem);
    max-height: 90vh;
    overflow-y: auto;
    overscroll-behavior: contain;
    -webkit-overflow-scrolling: touch;
}

.popup-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: clamp(1rem, 3vw, 2rem);
    position: sticky;
    top: 0;
    background: var(--background-color);
    padding-bottom: clamp(0.5rem, 2vw, 1rem);
    border-bottom: 1px solid var(--border-color);
    z-index: 1;
}

h3 {
    font-size: clamp(1.2rem, 3vw, 1.5rem);
    color: var(--accent-primary);
    line-height: 1.3;
    padding-right: clamp(1rem, 4vw, 2rem);
    margin: 0;
    max-width: 85%;
    overflow-wrap: break-word;
    font-weight: 600;
}

.close-button {
    background: var(--accent-primary);
    border: none;
    color: white;
    cursor: pointer;
    padding: clamp(0.4rem, 1.5vw, 0.5rem);
    border-radius: var(--border-radius);
    font-weight: 600;
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 44px;
    min-height: 44px;
    margin: -0.5rem;
    touch-action: manipulation;
    transition: opacity var(--transition-duration) var(--transition-timing);
}

.close-button:hover,
.close-button:focus-visible {
    opacity: 0.9;
}

.certification-item {
    background: var(--secondary-color);
    border: 1px solid var(--accent-tertiary);
    border-radius: var(--border-radius);
    padding: var(--container-padding);
    margin-bottom: 1rem;
    transition: transform var(--transition-duration) var(--transition-timing),
                box-shadow var(--transition-duration) var(--transition-timing);
}

.certification-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 0 15px rgba(var(--text-color-rgb), 0.1);
}

.certification-item:focus {
    outline: none;
}

.certification-item:focus-visible {
    outline: 2px solid var(--accent-primary);
    outline-offset: 2px;
}

.cert-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: var(--container-padding);
    margin-bottom: 2rem;
}

h4 {
    font-size: 1.5rem;
    color: var(--text-color);
    line-height: 1.3;
    margin: 0;
    font-weight: 600;
}

.duration-badge {
    background: var(--accent-primary);
    color: white;
    padding: 0.5rem 1rem;
    font-weight: 600;
    border-radius: 20px;
    font-size: 0.9rem;
    white-space: nowrap;
}

.courses {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.course {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
    color: var(--text-color);
    background: rgba(var(--text-color-rgb), 0.03);
    padding: 1rem;
    border-radius: calc(var(--border-radius) * 0.75);
    border: 1px solid var(--border-color);
}

.course-info {
    flex: 1;
    min-width: 0;
}

.course-name {
    display: block;
    font-size: 1rem;
    color: var(--text-color);
    font-weight: 500;
    line-height: 1.4;
}

.course-period {
    display: block;
    color: var(--text-color-secondary);
    font-size: 0.9rem;
    margin-top: 0.25rem;
}

.course-duration {
    color: var(--text-color-secondary);
    font-size: 0.9rem;
    white-space: nowrap;
    font-weight: 500;
}

@media (forced-colors: active) {
    .skill-popup {
        border: 2px solid CanvasText;
        background: Canvas;
    }

    .skill-popup::backdrop {
        background: rgba(0, 0, 0, 0.75);
        backdrop-filter: none;
    }

    .popup-header {
        border-color: CanvasText;
        background: Canvas;
    }

    h3, h4 {
        color: CanvasText;
    }

    .close-button {
        background: Canvas;
        color: CanvasText;
        border: 1px solid currentColor;
    }

    .close-button:hover,
    .close-button:focus-visible {
        background: Highlight;
        color: HighlightText;
    }

    .certification-item {
        background: Canvas;
        border-color: CanvasText;
    }

    .duration-badge {
        background: Highlight;
        color: HighlightText;
        border: 1px solid CanvasText;
    }

    .course {
        background: Canvas;
        border-color: CanvasText;
        color: CanvasText;
    }

    .course-period,
    .course-duration {
        color: GrayText;
    }
}

@media (max-width: 768px) {
    .popup-content {
        padding: clamp(1rem, 3vw, 1.5rem);
    }

    .certification-item {
        padding: clamp(0.8rem, 2vw, 1.2rem);
        margin-bottom: clamp(0.5rem, 2vw, 1rem);
    }

    .cert-header {
        flex-direction: column;
        gap: 0.75rem;
        margin-bottom: 1.25rem;
    }

    h4 {
        font-size: clamp(1rem, 2.5vw, 1.2rem);
    }

    .duration-badge {
        font-size: 0.85rem;
        padding: 0.4rem 0.8rem;
    }

    .course {
        flex-direction: column;
        gap: 0.4rem;
        padding: 0.75rem;
    }

    .course-name {
        font-size: 0.95rem;
    }

    .course-period,
    .course-duration {
        font-size: 0.85rem;
    }
}

@media (max-width: 480px) {
    .popup-content,
    .certification-item {
        padding: 0.75rem;
    }

    .cert-header {
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .course {
        padding: 0.6rem;
    }
}

@media (max-width: 360px) {
    .popup-content,
    .certification-item {
        padding: 0.65rem;
    }

    .course {
        padding: 0.5rem;
    }

    .duration-badge,
    .course-duration {
        font-size: 0.8rem;
    }
}

@media (prefers-reduced-motion: reduce) {
    .skill-popup,
    .certification-item,
    .close-button {
        transition: none !important;
        transform: none !important;
    }
}
</style>

<script>
// Gerenciamento do foco
function trapFocus(element: HTMLElement): (e: KeyboardEvent) => void {
    return function(e: KeyboardEvent) {
        if (e.key !== 'Tab') return;

        const focusableElements = Array.from(
            element.querySelectorAll<HTMLElement>(
                'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
            )
        );

        if (focusableElements.length === 0) return;

        const first = focusableElements[0];
        const last = focusableElements[focusableElements.length - 1];
        const active = document.activeElement;

        if (e.shiftKey && active === first) {
            last.focus();
            e.preventDefault();
        } else if (!e.shiftKey && active === last) {
            first.focus();
            e.preventDefault();
        }
    };
}

// Funções globais para manipulação do popup
declare global {
    interface Window {
        openPopup: (id: string) => void;
        closePopup: (id: string) => void;
    }
}

window.openPopup = (id: string) => {
    const dialog = document.getElementById(id) as HTMLDialogElement;
    if (dialog) dialog.showModal();
};

window.closePopup = (id: string) => {
    const dialog = document.getElementById(id) as HTMLDialogElement;
    if (dialog) dialog.close();
};

// Inicialização
document.addEventListener('astro:page-load', () => {
    const dialogs = document.querySelectorAll<HTMLDialogElement>('dialog');
    
    dialogs.forEach(dialog => {
        const closeBtn = dialog.querySelector<HTMLButtonElement>('.close-button');
        
        if (closeBtn) {
            closeBtn.addEventListener('click', () => dialog.close());
        }

        dialog.addEventListener('keydown', (e: KeyboardEvent) => {
            if (e.key === 'Escape') {
                dialog.close();
                return;
            }
            if (dialog.open) {
                trapFocus(dialog)(e);
            }
        });

        dialog.addEventListener('close', () => {
            document.body.style.overflow = '';
        });

        dialog.addEventListener('open', () => {
            document.body.style.overflow = 'hidden';
            closeBtn?.focus();
        });
    });
});
</script>