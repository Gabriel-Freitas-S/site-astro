---
interface Props {
    className?: string;
}

const { className = '' } = Astro.props;
export const prerender = true;
---

<div class:list={['base-card', className]}>
    <slot />
</div>

<style>
.base-card {
    background: var(--secondary-color);
    border-radius: var(--border-radius);
    padding: var(--container-padding);
    border: 1px solid var(--border-color);
    box-shadow: var(--card-shadow) rgba(var(--text-color-rgb), 0.05);
    transition: transform var(--transition-duration) var(--transition-timing),
                box-shadow var(--transition-duration) var(--transition-timing);
    touch-action: manipulation;
    content-visibility: auto;
    contain: layout style paint;
}

/* Para o card que está no viewport */
.base-card:hover,
.base-card:active {
    box-shadow: 0 4px 12px rgba(var(--text-color-rgb), 0.1);
    transform: translateY(-2px);
}

@media (max-width: 768px) {
    .base-card {
        padding: calc(var(--container-padding) * 0.75);
    }
}

@media (max-width: 480px) {
    .base-card {
        padding: calc(var(--container-padding) * 0.625);
        margin-bottom: 1rem;
    }
}

@media (prefers-reduced-motion: reduce) {
    .base-card {
        transition: none;
        transform: none;
    }
    
    .base-card:hover,
    .base-card:active {
        transform: none;
    }
}

:global(.light-theme) .base-card {
    box-shadow: var(--card-shadow) var(--border-color);
}

:global(.light-theme) .base-card:hover {
    box-shadow: 0 4px 12px var(--border-color);
}

/* Quando o card está fora do viewport */
.base-card:not(:where(:hover, :active)) {
    transform: translateY(0);
    box-shadow: var(--card-shadow) rgba(var(--text-color-rgb), 0.05);
}
</style>

<script>
// Adiciona o atributo inert para cards fora do viewport
const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.target.classList.contains('base-card')) {
            entry.target.toggleAttribute('inert', !entry.isIntersecting);
        }
    });
}, { threshold: 0.1 });

document.querySelectorAll('.base-card').forEach(card => {
    observer.observe(card);
});
</script>