---
interface Props {
    className?: string;
}

const { className = '' } = Astro.props;
---

<div class:list={["search-container", className]}>
    <form id="search-form" class="search-wrapper">
        <span class="search-icon">
            <span class="sr-only">Ícone de pesquisa</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24">
                <path fill="currentColor" d="m19.6 21l-6.3-6.3q-.75.6-1.725.95T9.5 16q-2.725 0-4.612-1.888T3 9.5q0-2.725 1.888-4.612T9.5 3q2.725 0 4.613 1.888T16 9.5q0 1.1-.35 2.075T14.7 13.3l6.3 6.3zM9.5 14q1.875 0 3.188-1.312T14 9.5q0-1.875-1.312-3.187T9.5 5Q7.625 5 6.313 6.313T5 9.5q0 1.875 1.313 3.188T9.5 14"/>
            </svg>
        </span>
        <input 
            type="search" 
            id="certification-search"
            name="search"
            placeholder="Pesquisar por título ou tecnologia..."
            class="search-input"
            aria-label="Pesquisar certificações"
        />
        <button type="submit" class="search-submit">
            <span class="sr-only">Pesquisar</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24">
                <path fill="currentColor" d="M9.5 14C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5S14 7.01 14 9.5S11.99 14 9.5 14zm6 0h-.79l-.28-.27a6.5 6.5 0 0 0 1.48-5.34c-.47-2.78-2.79-4.77-5.59-4.77A6.505 6.505 0 0 0 3 9.5C3 11.11 3.63 12.59 4.71 13.67C5.79 14.75 7.27 15.38 8.88 15.38c1.31 0 2.53-.36 3.57-.97l.27.28v.79l5 4.99L19.49 19l-4.99-5z"/>
            </svg>
        </button>
    </form>
    <div class="filter-tags" id="active-filters"></div>
</div>

<style>
.search-container {
    width: 100%;
    max-width: 800px;
    margin: 0 auto 2rem;
    padding-inline: 1rem;
}

.search-wrapper {
    position: relative;
    width: 100%;
    background: var(--card-bg);
    border-radius: var(--border-radius);
    box-shadow: var(--card-shadow);
    transition: box-shadow 0.3s ease;
    display: flex;
    align-items: center;
}

.search-wrapper:focus-within {
    box-shadow: 0 0 0 2px var(--accent-primary);
}

.search-icon {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: var(--text-color);
    opacity: 0.7;
    display: flex;
    align-items: center;
}

.search-input {
    flex: 1;
    padding: 1rem 1rem 1rem 3rem;
    border: none;
    border-radius: inherit;
    background: transparent;
    color: var(--text-color);
    font-size: 1rem;
}

.search-input::placeholder {
    color: var(--text-color);
    opacity: 0.7;
}

.search-input:focus {
    outline: none;
}

.search-submit {
    padding: 0.5rem 1rem;
    background: var(--accent-primary);
    border: none;
    border-radius: 0 var(--border-radius) var(--border-radius) 0;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s ease;
}

.search-submit:hover {
    background: color-mix(in srgb, var(--accent-primary) 85%, black);
}

.filter-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 1rem;
}

.filter-tag {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: var(--accent-primary);
    color: white;
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease;
}

.filter-tag:hover {
    background: color-mix(in srgb, var(--accent-primary) 85%, black);
}

.filter-tag .remove-icon {
    display: flex;
    align-items: center;
}

@media (max-width: 640px) {
    .search-container {
        padding-inline: 0.5rem;
    }
    
    .search-input {
        font-size: 0.9rem;
    }
}

/* Theme Adjustments */
:global(.light-theme) .search-wrapper {
    background: var(--card-bg);
    box-shadow: var(--card-shadow);
}

.sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}
</style>

<script>
interface Technology {
    name: string;
    icon: string;
}

interface Skill {
    title: string;
    technologies: Technology[];
}

interface Certification {
    title: string;
    skills: Skill[];
}

function initializeSearch() {
    const searchForm = document.getElementById('search-form') as HTMLFormElement;
    const searchInput = document.getElementById('certification-search') as HTMLInputElement;
    const activeFilters = document.getElementById('active-filters');
    const cards = document.querySelectorAll('.certification-card');
    const appliedFilters = new Set<string>();

    if (!searchInput || !activeFilters || !searchForm) return;

    function broadcastSearchUpdate(searchTerm: string) {
        requestAnimationFrame(() => {
            const event = new CustomEvent('globalSearch', {
                bubbles: true,
                detail: { searchTerm: searchTerm.toLowerCase() }
            });
            document.dispatchEvent(event);
        });
    }

    function triggerSearch(searchTerm: string, skillFilter: string = '') {
        let visibleCount = 0;

        cards.forEach(card => {
            const certificationData = (card as HTMLElement).dataset.certification;
            if (!certificationData) return;
            
            try {
                const certification = JSON.parse(certificationData) as Certification;
                const title = certification.title.toLowerCase();
                const skills = certification.skills.flatMap(skill => 
                    skill.technologies.map(tech => tech.name.toLowerCase())
                );
                
                const matchesSearch = searchTerm === '' || 
                    title.includes(searchTerm.toLowerCase()) || 
                    skills.some(skill => skill.includes(searchTerm.toLowerCase()));
                
                const matchesFilter = skillFilter === '' || 
                    skills.includes(skillFilter.toLowerCase());

                const shouldShow = matchesSearch && (skillFilter === '' || matchesFilter);
                
                card.classList.toggle('hidden', !shouldShow);
                if (shouldShow) visibleCount++;
            } catch (error) {
                console.error('Erro ao processar certificação:', error);
            }
        });

        // Propagar a busca para o conteúdo interno
        broadcastSearchUpdate(searchTerm);

        // Atualizar mensagem de resultados
        let noResults = document.querySelector('.no-results');
        if (visibleCount === 0) {
            if (!noResults) {
                noResults = document.createElement('div');
                noResults.className = 'no-results';
                noResults.textContent = 'Nenhuma certificação encontrada.';
                document.querySelector('.certifications-grid')?.appendChild(noResults);
            }
        } else if (noResults) {
            noResults.remove();
        }
    }

    function clearFilters() {
        appliedFilters.clear();
        if (activeFilters) {
            activeFilters.innerHTML = '';
        }

        // Limpar parâmetro da URL
        const url = new URL(window.location.href);
        url.searchParams.delete('skill');
        window.history.replaceState({}, '', url);

        // Propagar a limpeza dos filtros
        broadcastSearchUpdate('');
    }

    searchForm.addEventListener('submit', (e) => {
        e.preventDefault();
        clearFilters();
        triggerSearch(searchInput.value);
    });

    searchInput.addEventListener('input', () => {
        clearFilters();
        triggerSearch(searchInput.value);
    });

    // Lidar com filtro inicial da URL
    const urlParams = new URLSearchParams(window.location.search);
    const skillFilter = urlParams.get('skill');
    if (skillFilter) {
        appliedFilters.add(skillFilter);
        triggerSearch('', skillFilter);
    }
}

// Inicializar em diferentes eventos do Astro
document.addEventListener('astro:page-load', initializeSearch);
document.addEventListener('astro:after-swap', initializeSearch);
</script>