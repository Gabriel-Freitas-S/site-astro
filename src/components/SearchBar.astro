---
interface Props {
    className?: string;
    initialSearchTerm?: string | null;
}

const { className = '', initialSearchTerm = null } = Astro.props;
---

<div class:list={["search-container", className]}>
    <div class="search-wrapper">
        <span class="search-icon">
            <span class="sr-only">Ícone de pesquisa</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24">
                <path fill="currentColor" d="m19.6 21l-6.3-6.3q-.75.6-1.725.95T9.5 16q-2.725 0-4.612-1.888T3 9.5q0-2.725 1.888-4.612T9.5 3q2.725 0 4.613 1.888T16 9.5q0 1.1-.35 2.075T14.7 13.3l6.3 6.3zM9.5 14q1.875 0 3.188-1.312T14 9.5q0-1.875-1.312-3.187T9.5 5Q7.625 5 6.313 6.313T5 9.5q0 1.875 1.313 3.188T9.5 14"/>
            </svg>
        </span>
        <input 
            type="search" 
            id="certification-search"
            name="search"
            placeholder="Pesquisar por título ou tecnologia..."
            class="search-input"
            aria-label="Pesquisar certificações"
            value={initialSearchTerm || ''}
            data-search-input
            autocomplete="off"
        />
    </div>
</div>

<style>
.search-container {
    width: 100%;
    max-width: 800px;
    margin: 0 auto 2rem;
    padding-inline: 1rem;
}

.search-wrapper {
    position: relative;
    width: 100%;
    background: var(--card-bg);
    border-radius: var(--border-radius);
    box-shadow: var(--card-shadow);
    transition: box-shadow 0.3s ease;
    display: flex;
    align-items: center;
}

.search-wrapper:focus-within {
    box-shadow: 0 0 0 2px var(--accent-primary);
}

.search-icon {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: var(--text-color);
    opacity: 0.7;
    display: flex;
    align-items: center;
}

.search-input {
    flex: 1;
    padding: 1rem 1rem 1rem 3rem;
    border: none;
    border-radius: inherit;
    background: transparent;
    color: var(--text-color);
    font-size: 1rem;
    width: 100%;
}

.search-input::placeholder {
    color: var(--text-color);
    opacity: 0.7;
}

.search-input:focus {
    outline: none;
}

@media (max-width: 640px) {
    .search-container {
        padding-inline: 0.5rem;
    }
    
    .search-input {
        font-size: 0.9rem;
    }
}

/* Forced Colors Mode */
@media (forced-colors: active) {
    .search-wrapper {
        background: Field !important;
        border: 1px solid FieldText !important;
        box-shadow: none !important;
    }

    .search-wrapper:focus-within {
        border-color: Highlight !important;
        outline: 2px solid Highlight !important;
    }

    .search-input {
        color: FieldText !important;
        background: Field !important;
    }

    .search-icon {
        color: GrayText !important;
    }
}

/* Theme Adjustments */
:global(.light-theme) .search-wrapper {
    background: var(--card-bg);
    box-shadow: var(--card-shadow);
}

.sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}
</style>

<script>
function initializeSearch() {
    const searchInput = document.querySelector<HTMLInputElement>('[data-search-input]');
    if (!searchInput) return;

    let debounceTimeout: number;

    function updateURL(searchTerm: string) {
        const url = new URL(window.location.href);
        if (searchTerm) {
            url.searchParams.set('search', searchTerm);
            url.searchParams.delete('skill'); // Remover parâmetro 'skill' se existir
        } else {
            url.searchParams.delete('search');
            url.searchParams.delete('skill');
        }
        history.replaceState(null, '', url);
    }

    function triggerFilter(searchTerm: string) {
        document.dispatchEvent(new CustomEvent('filterCertifications', {
            detail: { searchTerm }
        }));
    }

    searchInput.addEventListener('input', (e) => {
        const searchTerm = (e.target as HTMLInputElement).value;
        
        clearTimeout(debounceTimeout);
        debounceTimeout = window.setTimeout(() => {
            updateURL(searchTerm);
            triggerFilter(searchTerm);
        }, 300);
    });

    // Aplicar filtro inicial se houver
    const initialValue = searchInput.value;
    if (initialValue) {
        requestAnimationFrame(() => {
            triggerFilter(initialValue);
        });
    }
}

// Inicializar em diferentes eventos
document.addEventListener('astro:page-load', initializeSearch);
document.addEventListener('astro:after-swap', initializeSearch);

// Executar imediatamente se o DOM estiver pronto
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeSearch);
} else {
    initializeSearch();
}
</script>