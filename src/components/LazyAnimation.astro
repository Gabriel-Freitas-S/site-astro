---
interface Props {
  className?: string;
  index: number;
}

const { className = "", index } = Astro.props;
---

<div
  class:list={[className, "lazy-animation"]}
  style={`
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.4s ease-out, transform 0.4s ease-out;
    transition-delay: ${index * 100}ms;
  `}
  data-index={index}
>
  <slot />
</div>

<style>
  .lazy-animation {
    will-change: opacity, transform;
  }

  @media (prefers-reduced-motion: reduce), (forced-colors: active) {
    .lazy-animation {
      opacity: 1 !important;
      transform: none !important;
      transition: none !important;
      forced-color-adjust: none;
    }
  }

  /* Suporte para navegadores legados - será removido após Edge 138 */
  @media (-ms-high-contrast: active) {
    .lazy-animation {
      -ms-high-contrast-adjust: none;
    }
  }
</style>

<script is:inline>
  (() => {
    function initializeLazyAnimation() {
      let loadedCount = 0;
      const elements = document.querySelectorAll('.lazy-animation');
      const totalElements = elements.length;

      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const element = entry.target;
              element.style.opacity = '1';
              element.style.transform = 'translateY(0)';
              observer.unobserve(element);
              loadedCount++;

              // Disparar evento para cada elemento carregado
              document.dispatchEvent(new CustomEvent('lazyAnimationItemLoaded', {
                detail: {
                  element,
                  index: parseInt(element.dataset.index || '0'),
                  isLast: loadedCount === totalElements
                }
              }));

              // Disparar evento quando todos os elementos forem carregados
              if (loadedCount === totalElements) {
                requestAnimationFrame(() => {
                  document.dispatchEvent(new CustomEvent('lazyAnimationComplete'));
                });
              }
            }
          });
        },
        { threshold: 0.1, rootMargin: '50px' }
      );

      elements.forEach(el => {
        if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
          // Se reduced motion estiver ativo, marcar como carregado imediatamente
          el.style.opacity = '1';
          el.style.transform = 'translateY(0)';
          loadedCount++;
          if (loadedCount === totalElements) {
            requestAnimationFrame(() => {
              document.dispatchEvent(new CustomEvent('lazyAnimationComplete'));
            });
          }
        } else {
          observer.observe(el);
        }
      });
    }

    // Inicializar em diferentes eventos do Astro
    document.addEventListener('astro:page-load', initializeLazyAnimation);
    document.addEventListener('astro:after-swap', initializeLazyAnimation);

    // Executar imediatamente se o DOM já estiver pronto
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeLazyAnimation);
    } else {
      initializeLazyAnimation();
    }
  })();
</script>