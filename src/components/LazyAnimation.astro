---
interface Props {
  className?: string;
  index: number;
}

const { className = "", index } = Astro.props;
---

<div
  class:list={[className, "lazy-animation"]}
  style={`
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.4s ease-out, transform 0.4s ease-out;
    transition-delay: ${index * 100}ms;
  `}
>
  <slot />
</div>

<style>
  .lazy-animation {
    will-change: opacity, transform;
  }

  @media (prefers-reduced-motion: reduce), (forced-colors: active) {
    .lazy-animation {
      opacity: 1 !important;
      transform: none !important;
      transition: none !important;
      forced-color-adjust: none;
    }
  }

  /* Suporte para navegadores legados - será removido após Edge 138 */
  @media (-ms-high-contrast: active) {
    .lazy-animation {
      -ms-high-contrast-adjust: none;
    }
  }
</style>

<script is:inline>
  (() => {
    document.addEventListener('astro:page-load', () => {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.style.opacity = '1';
              entry.target.style.transform = 'translateY(0)';
              observer.unobserve(entry.target);
            }
          });
        },
        { threshold: 0.1, rootMargin: '50px' }
      );

      document.querySelectorAll('.lazy-animation').forEach(el => {
        observer.observe(el);
      });
    });
  })();
</script>