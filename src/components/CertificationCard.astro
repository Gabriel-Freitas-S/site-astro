---
import BaseCard from './BaseCard.astro';
import { fade } from 'astro:transitions';

interface Technology {
    name: string;
    icon: string;
}

interface Skill {
    title: string;
    technologies: Technology[];
}

interface Props {
    certification: {
        title: string;
        duration: string;
        skills: Skill[];
        courses: {
            name: string;
            period?: string;
            duration: string;
        }[];
        complementaryContent?: {
            name: string;
            duration: string;
        }[];
    };
}

const { certification } = Astro.props;
export const prerender = true;
---

<BaseCard className="certification-card" data-certification={JSON.stringify(certification)}>
    <div
        class="card-content lazy-load filtered-content"
        data-astro-transition-scope
    >
        <div class="card-header" transition:name={`cert-header-${certification.title}`}>
            <h2>{certification.title}</h2>
            <span
                class="duration-badge"
                aria-label={`Duração: ${certification.duration}`}
                transition:name={`cert-duration-${certification.duration}`}
            >
                {certification.duration}
            </span>
        </div>

        <div class="content">
            <div class="section courses">
                <h3>Cursos</h3>
                <ul class="course-list">
                    {certification.courses.map(course => (
                        <li class="course-item" data-content={course.name.toLowerCase()}>
                            <div class="info-row">
                                <div class="info-main">
                                    <span class="name">{course.name}</span>
                                    {course.period && (
                                        <span class="period">({course.period})</span>
                                    )}
                                </div>
                                <span class="duration">{course.duration}</span>
                            </div>
                        </li>
                    ))}
                    <li class="no-results-course hidden">
                        Nenhum curso encontrado para o filtro aplicado.
                    </li>
                </ul>
            </div>

            {certification.complementaryContent && (
                <div class="section complementary">
                    <h3>Conteúdos complementares</h3>
                    <ul class="complementary-list">
                        {certification.complementaryContent.map(content => (
                            <li class="complementary-item" data-content={content.name.toLowerCase()}>
                                <div class="info-row">
                                    <span class="name">{content.name}</span>
                                    <span class="duration">{content.duration}</span>
                                </div>
                            </li>
                        ))}
                        <li class="no-results-complementary hidden">
                            Nenhum conteúdo complementar encontrado para o filtro aplicado.
                        </li>
                    </ul>
                </div>
            )}
        </div>
    </div>
</BaseCard>

<style>
.card-content {
    container-type: inline-size;
    container-name: card;
    display: grid;
    grid-template-rows: auto 1fr;
    gap: 1.5rem;
    opacity: 0;
    transform: translateY(10px);
    border-radius: inherit;
    overflow: hidden;
}

.card-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 1rem;
    margin-bottom: 1.5rem;
}

.card-header h2 {
    font-size: clamp(1.2rem, 2.5cqi, 1.5rem);
    line-height: 1.3;
    font-weight: 600;
}

.duration-badge {
    background: color-mix(in srgb, var(--accent-primary) 85%, black);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.9rem;
    white-space: nowrap;
    font-weight: 600;
    box-shadow: var(--card-shadow);
    height: 2rem;
    line-height: 1;
    display: inline-flex;
    align-items: center;
}

.section {
    margin-bottom: 1.5rem;
}

.section h3 {
    font-size: clamp(1rem, 2cqi, 1.1rem);
    margin-bottom: 1rem;
    font-weight: 600;
}

ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: grid;
    gap: 0.75rem;
}

.info-row {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
}

.info-main {
    flex: 1;
    min-width: 0;
}

.name {
    display: block;
    font-weight: 500;
    font-size: clamp(0.9rem, 2cqi, 1rem);
}

.period {
    display: block;
    margin-top: 0.25rem;
    opacity: 0.85;
    font-size: clamp(0.85rem, 1.8cqi, 0.9rem);
}

.duration {
    white-space: nowrap;
    font-size: clamp(0.85rem, 1.8cqi, 0.9rem);
    font-weight: 500;
    opacity: 0.85;
}

.no-results-course,
.no-results-complementary {
    text-align: center;
    padding: 1rem;
    color: var(--text-color);
    opacity: 0.8;
    font-size: 0.9rem;
    background: rgba(var(--text-color-rgb), 0.05);
    border-radius: var(--border-radius);
}

@container card (max-width: 480px) {
    .card-header {
        flex-direction: column;
    }

    .info-row {
        flex-direction: column;
        gap: 0.5rem;
    }

    li:not(.no-results-course):not(.no-results-complementary) {
        padding: 0.5rem;
        border-radius: var(--border-radius);
        background: rgba(var(--text-color-rgb), 0.05);
        overflow: hidden;
    }
}

:global(.light-theme) {
    .card-header h2 {
        font-weight: 700;
    }

    .content h3 {
        font-weight: 600;
    }
}

@media (prefers-reduced-motion: no-preference) {
    .card-content.lazy-load {
        view-transition-name: card;
        transition: opacity 0.3s ease-out, transform 0.3s ease-out;
        will-change: transform, opacity;
    }

    .card-content.visible {
        opacity: 1;
        transform: translateY(0);
    }
}

@media (prefers-reduced-motion: reduce) {
    .card-content {
        opacity: 1;
        transform: none;
        transition: none;
    }
}

.course-item.filtered,
.complementary-item.filtered {
    display: none !important;
}

.hidden {
    display: none !important;
}
</style>

<script>
function initializeContentFiltering() {
    document.querySelectorAll<HTMLElement>('.certification-card').forEach(card => {
        if (!card) return;

        function updateVisibility(
            elements: NodeListOf<HTMLElement>, 
            noResultsElement: HTMLElement | null, 
            searchTerm: string
        ) {
            let visibleCount = 0;
            elements.forEach(element => {
                const content = element.dataset.content || '';
                const shouldShow = !searchTerm || content.includes(searchTerm.toLowerCase());
                element.classList.toggle('filtered', !shouldShow);
                if (shouldShow) visibleCount++;
            });

            if (noResultsElement) {
                noResultsElement.classList.toggle('hidden', visibleCount > 0);
            }

            return visibleCount;
        }

        function filterCardContent(searchTerm: string) {
            const contentWrapper = card.querySelector<HTMLElement>('.filtered-content');
            if (!contentWrapper) return;

            const courses = contentWrapper.querySelectorAll<HTMLElement>('.course-item');
            const complementaryItems = contentWrapper.querySelectorAll<HTMLElement>('.complementary-item');
            const noResultsCourse = contentWrapper.querySelector<HTMLElement>('.no-results-course');
            const noResultsComplementary = contentWrapper.querySelector<HTMLElement>('.no-results-complementary');

            updateVisibility(courses, noResultsCourse, searchTerm);
            updateVisibility(complementaryItems, noResultsComplementary, searchTerm);
        }

        // Observar eventos globais de busca
        document.addEventListener('globalSearch', ((event: CustomEvent) => {
            if (card.classList.contains('hidden')) return;
            const searchTerm = event.detail?.searchTerm || '';
            filterCardContent(searchTerm);
        }) as EventListener);

        // Aplicar filtro inicial da URL
        const urlParams = new URLSearchParams(window.location.search);
        const skillFilter = urlParams.get('skill');
        if (skillFilter && !card.classList.contains('hidden')) {
            filterCardContent(skillFilter);
        }
    });
}

// Inicializar quando o DOM estiver pronto
document.addEventListener('astro:page-load', initializeContentFiltering);
document.addEventListener('astro:after-swap', initializeContentFiltering);
</script>