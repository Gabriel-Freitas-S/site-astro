---
import BaseCard from './BaseCard.astro';
import { fade } from 'astro:transitions';

interface Props {
    certification: {
        title: string;
        duration: string;
        courses: {
            name: string;
            period?: string;
            duration: string;
        }[];
        complementaryContent?: {
            name: string;
            duration: string;
        }[];
    };
}

const { certification } = Astro.props;
export const prerender = true;
---
<BaseCard className="certification-card">
    <div
        class="card-content lazy-load"
        data-astro-transition-scope
    >
        <div class="card-header" transition:name={`cert-header-${certification.title}`}>
            <h2>{certification.title}</h2>
            <span
                class="duration-badge"
                aria-label={`Duração: ${certification.duration}`}
                transition:name={`cert-duration-${certification.duration}`}
            >
                {certification.duration}
            </span>
        </div>

        <div class="content">
            <div class="section courses">
                <h3>Cursos</h3>
                <ul>
                    {certification.courses.map(course => (
                        <li>
                            <div class="info-row">
                                <div class="info-main">
                                    <span class="name">{course.name}</span>
                                    {course.period && (
                                        <span class="period">({course.period})</span>
                                    )}
                                </div>
                                <span class="duration">{course.duration}</span>
                            </div>
                        </li>
                    ))}
                </ul>
            </div>

            {certification.complementaryContent && (
                <div class="section complementary">
                    <h3>Conteúdos complementares</h3>
                    <ul>
                        {certification.complementaryContent.map(content => (
                            <li>
                                <div class="info-row">
                                    <span class="name">{content.name}</span>
                                    <span class="duration">{content.duration}</span>
                                </div>
                            </li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    </div>
</BaseCard>

<style>
/* Layout */
.card-content {
    container-type: inline-size;
    container-name: card;
    display: grid;
    grid-template-rows: auto 1fr;
    gap: 1.5rem;
    opacity: 0;
    transform: translateY(10px);
    border-radius: inherit;
    overflow: hidden;
}

/* Garantir que elementos internos mantenham o border-radius */
.card-content > * {
    border-radius: inherit;
}

/* Header */
.card-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 1rem;
    margin-bottom: 1.5rem;
}

.card-header h2 {
    font-size: clamp(1.2rem, 2.5cqi, 1.5rem);
    line-height: 1.3;
    font-weight: 600;
}

.duration-badge {
    background: color-mix(in srgb, var(--accent-primary) 85%, black);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.9rem;
    white-space: nowrap;
    font-weight: 600;
    box-shadow: var(--card-shadow);
    height: 2rem;
    line-height: 1;
    display: inline-flex;
    align-items: center;
}

/* Content Sections */
.section {
    margin-bottom: 1.5rem;
}

.section h3 {
    font-size: clamp(1rem, 2cqi, 1.1rem);
    margin-bottom: 1rem;
    font-weight: 600;
}

/* Lists */
ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: grid;
    gap: 0.75rem;
}

/* Info Rows */
.info-row {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
}

.info-main {
    flex: 1;
    min-width: 0;
}

.name {
    display: block;
    font-weight: 500;
    font-size: clamp(0.9rem, 2cqi, 1rem);
}

.period {
    display: block;
    margin-top: 0.25rem;
    opacity: 0.85;
    font-size: clamp(0.85rem, 1.8cqi, 0.9rem);
}

.duration {
    white-space: nowrap;
    font-size: clamp(0.85rem, 1.8cqi, 0.9rem);
    font-weight: 500;
    opacity: 0.85;
}

/* Responsive Layout */
@container card (max-width: 480px) {
    .card-header {
        flex-direction: column;
    }

    .info-row {
        flex-direction: column;
        gap: 0.5rem;
    }

    li {
        padding: 0.5rem;
        border-radius: var(--border-radius);
        background: rgba(var(--text-color-rgb), 0.05);
        overflow: hidden;
    }
}

/* Theme Adjustments */
:global(.light-theme) {
    .card-header h2 {
        font-weight: 700;
    }

    .content h3 {
        font-weight: 600;
    }
}

/* Animations */
@media (prefers-reduced-motion: no-preference) {
    .card-content.lazy-load {
        view-transition-name: card;
        transition: opacity 0.3s ease-out, transform 0.3s ease-out;
        will-change: transform, opacity;
    }

    .card-content.visible {
        opacity: 1;
        transform: translateY(0);
    }
}

@media (prefers-reduced-motion: reduce) {
    .card-content {
        opacity: 1;
        transform: none;
        transition: none;
    }
}
</style>

<script>
const loadCards = () => {
    const cards = document.querySelectorAll('.lazy-load');
    if (!cards.length) return;

    // Carregar cards imediatamente visíveis
    const loadCard = (element: Element) => {
        if (element instanceof HTMLElement && !element.classList.contains('visible')) {
            requestAnimationFrame(() => {
                element.classList.add('visible');
            });
        }
    };

    // Verificar cards inicialmente visíveis
    cards.forEach(element => {
        if (element instanceof HTMLElement) {
            const rect = element.getBoundingClientRect();
            if (rect.top < window.innerHeight) {
                loadCard(element);
            }
        }
    });

    // Configurar observer para os demais cards
    const observer = new IntersectionObserver(
        (entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    loadCard(entry.target);
                    observer.unobserve(entry.target);
                }
            });
        },
        {
            threshold: 0,
            rootMargin: '50px'
        }
    );

    cards.forEach(element => {
        if (element instanceof HTMLElement && !element.classList.contains('visible')) {
            observer.observe(element);
        }
    });
};

// Carregar cards em diferentes eventos
document.addEventListener('astro:page-load', loadCards, { passive: true });
document.addEventListener('astro:after-swap', loadCards, { passive: true });

// Cleanup para o observer quando a página for descarregada
document.addEventListener('astro:before-swap', () => {
    document.querySelectorAll('.lazy-load').forEach(card => {
        card.classList.remove('visible');
    });
});
</script>