---
import BaseCard from './BaseCard.astro';
import { fade } from 'astro:transitions';

interface Props {
    certification: {
        title: string;
        duration: string;
        courses: {
            name: string;
            period?: string;
            duration: string;
        }[];
        complementaryContent?: {
            name: string;
            duration: string;
        }[];
    };
}

const { certification } = Astro.props;
---

<BaseCard className="certification-card">
    <div class="card-content" transition:animate={fade({ duration: '0.3s' })}>
        <div class="card-header">
            <h2>{certification.title}</h2>
            <span class="duration-badge" aria-label={`Duração: ${certification.duration}`}>
                {certification.duration}
            </span>
        </div>

        <div class="content">
            <div class="section courses">
                <h3>Cursos</h3>
                <ul>
                    {certification.courses.map(course => (
                        <li>
                            <div class="info-row">
                                <div class="info-main">
                                    <span class="name">{course.name}</span>
                                    {course.period && (
                                        <span class="period">({course.period})</span>
                                    )}
                                </div>
                                <span class="duration">{course.duration}</span>
                            </div>
                        </li>
                    ))}
                </ul>
            </div>

            {certification.complementaryContent && (
                <div class="section complementary" transition:animate={fade({ duration: '0.4s' })}>
                    <h3>Conteúdos complementares</h3>
                    <ul>
                        {certification.complementaryContent.map(content => (
                            <li>
                                <div class="info-row">
                                    <span class="name">{content.name}</span>
                                    <span class="duration">{content.duration}</span>
                                </div>
                            </li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    </div>
</BaseCard>

<style>
/* Layout */
.card-content {
    contain: style layout;
    min-height: 200px;
    display: grid;
    grid-template-rows: auto 1fr;
    gap: 2rem;
}

/* Header */
.card-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: var(--container-padding);
    margin-bottom: 2rem;
}

.card-header h2 {
    font-size: 1.5rem;
    line-height: 1.3;
    font-weight: 600;
}

.duration-badge {
    background: color-mix(in srgb, var(--accent-primary) 85%, black);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.9rem;
    white-space: nowrap;
    font-weight: 600;
    box-shadow: var(--card-shadow) var(--border-color);
    contain: layout style;
    height: 2rem;
    line-height: 1;
    display: inline-flex;
    align-items: center;
}

/* Content Sections */
.section {
    margin-bottom: 2rem;
}

.section.complementary {
    contain: style layout;
    min-height: 100px;
}

.section h3 {
    font-size: 1.1rem;
    margin-bottom: 1rem;
    font-weight: 600;
}

/* Lists */
ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

li {
    margin-bottom: 1rem;
}

/* Info Rows */
.info-row {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
}

.info-main {
    flex: 1;
    min-width: 0;
}

.name {
    display: block;
    font-weight: 500;
}

.period {
    display: block;
    margin-top: 0.25rem;
    opacity: 0.85;
    font-size: 0.9rem;
}

.duration {
    white-space: nowrap;
    font-size: 0.9rem;
    font-weight: 500;
    opacity: 0.85;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .card-header {
        flex-direction: column;
        margin-bottom: 1.5rem;
    }

    .card-header h2 {
        font-size: 1.3rem;
    }

    .duration-badge {
        align-self: flex-start;
    }

    .info-row {
        flex-direction: column;
        gap: 0.5rem;
    }

    .section h3 {
        font-size: 1rem;
    }
}

@media (max-width: 480px) {
    .section {
        margin-bottom: 1.5rem;
    }

    .card-header h2 {
        font-size: 1.2rem;
        line-height: 1.4;
    }

    .duration-badge {
        font-size: 0.85rem;
        margin-top: 0.5rem;
    }

    li {
        margin-bottom: 0.75rem;
        padding: 0.5rem;
        border-radius: calc(var(--border-radius) * 0.75);
        background: rgba(var(--text-color-rgb), 0.05);
    }

    .name {
        font-size: 0.95rem;
        line-height: 1.4;
    }

    .period, .duration {
        font-size: 0.85rem;
    }

    .period {
        margin-top: 0.2rem;
    }

    .duration {
        margin-top: 0.25rem;
    }
}

@media (max-width: 360px) {
    li {
        padding: 0.4rem;
    }

    .name {
        font-size: 0.9rem;
    }

    .duration-badge {
        padding: 0.4rem 0.8rem;
    }
}

/* Theme-specific adjustments */
:global(.light-theme) {
    .card-header h2 {
        font-weight: 700;
    }

    .content h3 {
        font-weight: 600;
    }
}

@media (prefers-reduced-motion: reduce) {
    .card-content,
    .section.complementary {
        animation: none !important;
        transition: none !important;
    }
}
</style>

<style is:global>
.card-content {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.4s ease-out, transform 0.4s ease-out;
    will-change: transform, opacity;
}

.card-content.visible {
    opacity: 1;
    transform: translateY(0);
}

@media (prefers-reduced-motion: reduce) {
    .card-content {
        transition: none !important;
        opacity: 1 !important;
        transform: none !important;
    }
}
</style>

<script>
document.addEventListener('astro:page-load', () => {
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
                observer.unobserve(entry.target);
            }
        });
    }, {
        threshold: 0.1,
        rootMargin: '50px'
    });

    document.querySelectorAll('.card-content').forEach(card => {
        observer.observe(card);
    });
});
</script>