---
import BaseCard from './BaseCard.astro';

interface Technology {
    name: string;
}

interface Skill {
    title: string;
    technologies: Technology[];
}

interface Props {
    certification: {
        title: string;
        duration: string;
        skills: Skill[];
        courses: {
            name: string;
            period?: string;
            duration: string;
        }[];
        complementaryContent?: {
            name: string;
            duration: string;
        }[];
    };
    searchTerm?: string;
}

const { certification, searchTerm = '' } = Astro.props;

function hasMatch(content: string): boolean {
    if (!searchTerm || !content) return false;
    return content.toLowerCase().includes(searchTerm.toLowerCase());
}

export const prerender = true;
---

<BaseCard className="certification-card" data-certification={JSON.stringify(certification)}>
    <div class="card-content">
        <div class="card-header">
            <h2>{certification.title}</h2>
            <span
                class="duration-badge"
                aria-label={`Duração: ${certification.duration}`}
            >
                {certification.duration}
            </span>
        </div>

        <div class="content">
            <div class="section courses">
                <h3>Cursos</h3>
                <ul class="course-list">
                    {certification.courses.map(course => {
                        const isMatched = hasMatch(course.name);
                        return (
                            <li class:list={["course-item", { matched: isMatched }]} data-content={course.name.toLowerCase()}>
                                <div class="info-row">
                                    <div class="info-main">
                                        <span class="name">{course.name}</span>
                                        {course.period && (
                                            <span class="period">({course.period})</span>
                                        )}
                                    </div>
                                    <span class="duration">{course.duration}</span>
                                </div>
                            </li>
                        );
                    })}
                </ul>
            </div>

            {certification.complementaryContent && (
                <div class="section complementary">
                    <h3>Conteúdos complementares</h3>
                    <ul class="complementary-list">
                        {certification.complementaryContent.map(content => {
                            const isMatched = hasMatch(content.name);
                            return (
                                <li class:list={["complementary-item", { matched: isMatched }]} data-content={content.name.toLowerCase()}>
                                    <div class="info-row">
                                        <span class="name">{content.name}</span>
                                        <span class="duration">{content.duration}</span>
                                    </div>
                                </li>
                            );
                        })}
                    </ul>
                </div>
            )}
        </div>
    </div>
</BaseCard>

<style>
.card-content {
    container-type: inline-size;
    container-name: card;
    display: grid;
    grid-template-rows: auto 1fr;
    gap: 1.5rem;
    border-radius: inherit;
    overflow: hidden;
}

.card-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 1rem;
    margin-bottom: 1.5rem;
}

.card-header h2 {
    font-size: clamp(1.2rem, 2.5cqi, 1.5rem);
    line-height: 1.3;
    font-weight: 600;
}

.duration-badge {
    background: color-mix(in srgb, var(--accent-primary) 85%, black);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.9rem;
    white-space: nowrap;
    font-weight: 600;
    box-shadow: var(--card-shadow);
    height: 2rem;
    line-height: 1;
    display: inline-flex;
    align-items: center;
}

.section {
    margin-bottom: 1.5rem;
}

.section h3 {
    font-size: clamp(1rem, 2cqi, 1.1rem);
    margin-bottom: 1rem;
    font-weight: 600;
}

ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: grid;
    gap: 0.75rem;
}

.info-row {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
}

.info-main {
    flex: 1;
    min-width: 0;
}

.name {
    display: block;
    font-weight: 500;
    font-size: clamp(0.9rem, 2cqi, 1rem);
}

.period {
    display: block;
    margin-top: 0.25rem;
    opacity: 0.85;
    font-size: clamp(0.85rem, 1.8cqi, 0.9rem);
}

.duration {
    white-space: nowrap;
    font-size: clamp(0.85rem, 1.8cqi, 0.9rem);
    font-weight: 500;
    opacity: 0.85;
}

@container card (max-width: 480px) {
    .card-header {
        flex-direction: column;
    }

    .info-row {
        flex-direction: column;
        gap: 0.5rem;
    }

    li {
        padding: 0.5rem;
        border-radius: var(--border-radius);
        background: rgba(var(--text-color-rgb), 0.05);
        overflow: hidden;
    }
}

:global(.light-theme) {
    .card-header h2 {
        font-weight: 700;
    }

    .content h3 {
        font-weight: 600;
    }
}

.course-item,
.complementary-item {
    position: relative;
    transition: all 0.3s ease;
}

.course-item.matched,
.complementary-item.matched {
    background: color-mix(in srgb, var(--accent-primary) 15%, var(--card-bg));
    border-left: 3px solid var(--accent-primary);
    padding-left: calc(0.5rem - 3px);
    box-shadow: 0 2px 4px rgba(var(--text-color-rgb), 0.1);
}

/* Forced Colors Mode */
@media (forced-colors: active) {
    .duration-badge {
        background: ButtonFace !important;
        color: ButtonText !important;
        border: 1px solid currentColor !important;
    }

    .info-row {
        color: CanvasText !important;
    }

    li {
        background: Canvas !important;
        border: 1px solid currentColor !important;
    }

    .course-item.matched,
    .complementary-item.matched {
        background: Highlight !important;
        color: HighlightText !important;
        border-color: currentColor !important;
    }
}
</style>

<script>
function initializeCard(card: Element) {
    if (!card) return;

    function hasMatch(content: string, searchTerm: string): boolean {
        if (!searchTerm || !content) return false;
        return content.toLowerCase().includes(searchTerm.toLowerCase());
    }

    function updateHighlights(searchTerm: string) {
        requestAnimationFrame(() => {
            card.querySelectorAll<HTMLElement>('[data-content]').forEach(item => {
                const content = item.dataset.content || '';
                item.classList.toggle('matched', hasMatch(content, searchTerm));
            });
        });
    }

    // Atualizar highlights quando receber evento de busca
    document.addEventListener('certificationSearch', ((event: CustomEvent) => {
        const searchTerm = event.detail?.searchTerm || '';
        updateHighlights(searchTerm);
    }) as EventListener);

    // Aplicar highlight inicial baseado na URL
    function applyInitialHighlight() {
        const url = new URL(window.location.href);
        const searchTerm = url.searchParams.get('search');
        if (searchTerm) {
            updateHighlights(searchTerm);
        }
    }

    // Aplicar highlights em diferentes momentos
    applyInitialHighlight();

    // Observar mudanças na URL (para navegação do histórico)
    window.addEventListener('popstate', applyInitialHighlight);
}

// Inicializar em diferentes eventos do Astro
document.addEventListener('astro:page-load', () => {
    document.querySelectorAll('.certification-card').forEach(initializeCard);
});

document.addEventListener('astro:after-swap', () => {
    document.querySelectorAll('.certification-card').forEach(initializeCard);
});

// Executar inicialização imediata se o DOM já estiver pronto
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.certification-card').forEach(initializeCard);
    });
} else {
    document.querySelectorAll('.certification-card').forEach(initializeCard);
}
</script>