---
import BaseCard from './BaseCard.astro';

interface Props {
    experience: {
        company: string;
        position: string;
        period: string;
        description: string;
        achievements?: string[];
    };
}

const { experience } = Astro.props;
export const prerender = true;
---

<BaseCard>
    <article
        class="experience-card lazy-load"
        data-astro-transition-scope
    >
        <header class="card-header" transition:name={`exp-header-${experience.company}`}>
            <div class="position-info">
                <h2 transition:name={`exp-position-${experience.position}`}>{experience.position}</h2>
                <h3 transition:name={`exp-company-${experience.company}`}>{experience.company}</h3>
            </div>
            <span
                class="duration-badge"
                aria-label={`Período: ${experience.period}`}
                transition:name={`exp-period-${experience.period}`}
            >
                {experience.period}
            </span>
        </header>

        <p class="description">{experience.description}</p>

        {experience.achievements && (
            <section
                class="achievements"
                aria-labelledby="achievements-title"
            >
                <h3 id="achievements-title">Principais Conquistas</h3>
                <ul>
                    {experience.achievements.map(achievement => (
                        <li>{achievement}</li>
                    ))}
                </ul>
            </section>
        )}
    </article>
</BaseCard>

<style>
/* Layout */
.experience-card {
    display: block;
    contain: content;
    min-height: 150px;
    opacity: 0;
    transform: translateY(10px);
    transition: opacity 0.4s ease-out, transform 0.4s ease-out;
    will-change: transform, opacity;
}

.experience-card.visible {
    opacity: 1;
    transform: translateY(0);
}

/* Garantir que o conteúdo interno tenha uma transição mais suave */
.card-header,
.description,
.achievements {
    opacity: 0;
    transform: translateY(5px);
    transition: opacity 0.5s ease-out, transform 0.5s ease-out;
    will-change: opacity, transform;
    backface-visibility: hidden;
    transform-style: preserve-3d;
    perspective: 1000px;
}

.experience-card.visible .card-header {
    opacity: 1;
    transform: translateY(0) translateZ(0);
    transition-delay: 0.1s;
}

.experience-card.visible .description {
    opacity: 1;
    transform: translateY(0) translateZ(0);
    transition-delay: 0.2s;
}

.experience-card.visible .achievements {
    opacity: 1;
    transform: translateY(0) translateZ(0);
    transition-delay: 0.3s;
}

/* Garantir que os elementos mantenham sua visibilidade */
.experience-card.visible .card-header,
.experience-card.visible .description,
.experience-card.visible .achievements {
    visibility: visible;
    pointer-events: auto;
}

.card-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: var(--container-padding);
    margin-bottom: 1.5rem;
    contain: layout style;
    min-height: 60px;
}

/* Position Info */
.position-info h2 {
    font-size: 1.5rem;
    color: var(--accent-primary);
    margin-bottom: 0.5rem;
    line-height: 1.3;
    min-height: 1.95rem;
}

.position-info h3 {
    font-size: 1.1rem;
    color: var(--accent-secondary);
    font-weight: 500;
    line-height: 1.4;
    min-height: 1.54rem;
}

/* Duration Badge */
.duration-badge {
    background: var(--accent-primary);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.9rem;
    white-space: nowrap;
    height: 2rem;
    font-weight: 600;
    box-shadow: var(--card-shadow) var(--border-color);
    contain: layout style;
}

/* Content */
.description {
    line-height: 1.6;
    margin-bottom: 2rem;
    opacity: 0.9;
    min-height: 4rem;
    text-rendering: optimizeLegibility;
    backface-visibility: hidden;
    font-display: swap;
    contain: paint;
    will-change: transform;
    transform: translateZ(0);
}

.achievements {
    margin-top: 2rem;
    contain: content;
    min-height: 100px;
}

.achievements h3 {
    font-size: 1.1rem;
    margin-bottom: 1rem;
    font-weight: 600;
}

/* List styles */
ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

li {
    position: relative;
    padding-left: 1.5rem;
    margin-bottom: 1rem;
    opacity: 0.9;
    line-height: 1.5;
}

li::before {
    content: "•";
    color: var(--accent-secondary);
    position: absolute;
    left: 0;
    top: -1px;
    font-size: 1.2em;
}

/* Responsive styles */
@media (max-width: 768px) {
    .card-header {
        flex-direction: column;
        gap: 1rem;
    }

    .position-info h2 {
        font-size: 1.3rem;
    }

    .position-info h3 {
        font-size: 1rem;
    }

    .duration-badge {
        font-size: 0.85rem;
        padding: 0.4rem 0.8rem;
    }

    .description {
        font-size: 0.95rem;
        margin-bottom: 1.5rem;
    }

    .achievements h3 {
        font-size: 1rem;
    }
}

@media (max-width: 480px) {
    .card-header {
        gap: 1rem;
        margin-bottom: 1.25rem;
    }

    .position-info h2 {
        font-size: 1.2rem;
        line-height: 1.4;
    }

    .position-info h3 {
        font-size: 0.95rem;
        line-height: 1.3;
    }

    .description {
        font-size: 0.9rem;
        margin-bottom: 1.5rem;
        line-height: 1.5;
    }

    li {
        font-size: 0.9rem;
        padding: 0.5rem;
        padding-left: 1.5rem;
        margin-bottom: 0.75rem;
        background: rgba(var(--text-color-rgb), 0.03);
        border-radius: calc(var(--border-radius) * 0.75);
    }

    li::before {
        left: 0.5rem;
        top: 0.5rem;
    }

    .achievements {
        margin-top: 1.5rem;
    }
}

@media (max-width: 360px) {
    li {
        padding: 0.4rem;
        padding-left: 1.25rem;
    }

    li::before {
        left: 0.4rem;
    }
}

@media (prefers-reduced-motion: reduce), (forced-colors: active) {
    .experience-card,
    .card-header,
    .description,
    .achievements {
        transition: none !important;
        animation: none !important;
        opacity: 1 !important;
        transform: none !important;
        visibility: visible !important;
    }

    .duration-badge {
        background: ButtonFace !important;
        color: ButtonText !important;
        border: 1px solid currentColor !important;
        box-shadow: none !important;
    }

    .position-info h2 {
        color: CanvasText !important;
    }

    .position-info h3 {
        color: GrayText !important;
    }

    .description {
        color: CanvasText !important;
    }

    .achievements {
        border-top: 1px solid currentColor;
    }

    li::before {
        color: currentColor !important;
    }
}

@media (forced-colors: active) {
    .experience-card {
        forced-color-adjust: none;
    }

    .duration-badge {
        forced-color-adjust: auto;
    }

    li {
        background: Canvas !important;
        color: CanvasText !important;
    }

    li:hover {
        background: Highlight !important;
        color: HighlightText !important;
    }
}

/* Garantir visibilidade após o carregamento */
.experience-card.lazy-load.visible,
.experience-card.lazy-load.visible .card-header,
.experience-card.lazy-load.visible .description,
.experience-card.lazy-load.visible .achievements {
    visibility: visible;
    pointer-events: auto;
}
</style>

<script>
const initializeExperienceCards = () => {
    const cards = document.querySelectorAll<HTMLElement>('.experience-card.lazy-load');
    if (!cards.length) return;

    let observer: IntersectionObserver;

    const loadCard = (element: Element) => {
        if (element instanceof HTMLElement && !element.classList.contains('visible')) {
            // Primeiro, remove qualquer estado anterior
            element.style.opacity = '0';
            element.style.transform = 'translateY(10px)';
            
            // Força um reflow
            void element.offsetHeight;
            
            // Aplica as classes e estilos necessários
            element.classList.add('visible');
            element.style.opacity = '1';
            element.style.transform = 'translateY(0)';
            
            // Ativa os elementos internos com delay
            const internals = element.querySelectorAll('.card-header, .description, .achievements');
            internals.forEach((internal: Element, index) => {
                if (internal instanceof HTMLElement) {
                    setTimeout(() => {
                        internal.style.opacity = '1';
                        internal.style.transform = 'translateY(0) translateZ(0)';
                        internal.style.visibility = 'visible';
                    }, index * 100);
                }
            });
        }
    };

    const cleanup = () => {
        if (observer) {
            observer.disconnect();
        }
        cards.forEach(card => {
            if (card instanceof HTMLElement) {
                card.classList.remove('visible');
                const internals = card.querySelectorAll('.card-header, .description, .achievements');
                internals.forEach((internal: Element) => {
                    if (internal instanceof HTMLElement) {
                        internal.style.opacity = '0';
                        internal.style.transform = 'translateY(5px)';
                    }
                });
            }
        });
    };

    observer = new IntersectionObserver(
        (entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    loadCard(entry.target);
                    observer.unobserve(entry.target);
                }
            });
        },
        {
            threshold: 0.1,
            rootMargin: '50px'
        }
    );

    // Limpa estados anteriores
    cleanup();

    // Inicia observação dos cards
    requestAnimationFrame(() => {
        cards.forEach(card => {
            const rect = card.getBoundingClientRect();
            if (rect.top < window.innerHeight) {
                loadCard(card);
            } else {
                observer.observe(card);
            }
        });
    });
};

// Inicializa os cards em diferentes eventos
document.addEventListener('astro:page-load', initializeExperienceCards, { passive: true });
document.addEventListener('astro:after-swap', initializeExperienceCards, { passive: true });

// Cleanup antes de trocar de página
document.addEventListener('astro:before-swap', () => {
    const cards = document.querySelectorAll('.experience-card.lazy-load');
    cards.forEach(card => {
        if (card instanceof HTMLElement) {
            card.classList.remove('visible');
            card.style.opacity = '0';
            card.style.transform = 'translateY(10px)';
        }
    });
});
</script>
