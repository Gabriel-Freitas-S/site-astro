---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import ExperienceCard from '../components/ExperienceCard.astro';
import { getCollection } from 'astro:content';

const experiences = await getCollection('experience');
const sortedExperiences = experiences.sort((a, b) => {
    const getDate = (period: string) => {
        const startDate = period.split(' - ')[0];
        const [month, year] = startDate.replace('de ', '').split(' ');
        const months = {
            'jan': 0, 'fev': 1, 'mar': 2, 'abr': 3, 'mai': 4, 'jun': 5,
            'jul': 6, 'ago': 7, 'set': 8, 'out': 9, 'nov': 10, 'dez': 11
        };
        return new Date(parseInt(year), months[month as keyof typeof months]);
    };

    const dateA = getDate(a.data.period);
    const dateB = getDate(b.data.period);
    return dateB.getTime() - dateA.getTime();
});

// Gerar descrição com base nas experiências mais recentes
const latestExperience = sortedExperiences[0]?.data;
const description = latestExperience
    ? `Experiência profissional como ${latestExperience.position} na ${latestExperience.company} e outras empresas do setor de tecnologia.`
    : "Experiência profissional em desenvolvimento de software e tecnologia.";
---

<Layout
    title="Experiência Profissional - Gabriel Freitas Souza"
    description={description}
>
    <main id="main-content">
            <Navigation />
            <div class="page-header">
                <h1>Experiência Profissional</h1>
                <p>Minha trajetória e conquistas profissionais</p>
            </div>
    
            <section
                class="timeline"
                aria-label="Linha do tempo de experiências profissionais"
                style="content-visibility: auto; contain-intrinsic-size: 1000px;"
            >
            {sortedExperiences.map((exp, index) => (
                <div class="timeline-item visible" data-index={index}>
                    <ExperienceCard experience={exp.data} />
                    {index !== sortedExperiences.length - 1 && (
                        <div 
                            class="timeline-connector" 
                            role="presentation" 
                            aria-hidden="true"
                        >
                            <div class="line"></div>
                            <div class="dot"></div>
                        </div>
                    )}
                </div>
            ))}
        </section>
    </main>
</Layout>

<style>
.page-header {
    text-align: center;
    margin-bottom: 3rem;
    contain: content;
    display: block;
}

.page-header h1 {
    font-size: clamp(1.5rem, 5vw, 2.5rem);
    margin-bottom: 0.75rem;
    background: linear-gradient(90deg, var(--accent-primary), var(--accent-secondary));
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    text-fill-color: transparent;
    line-height: 1.3;
    max-width: 90vw;
    margin-inline: auto;
    display: block;
    text-rendering: optimizeLegibility;
    backface-visibility: hidden;
    transform: translateZ(0);
}

.page-header p {
    color: var(--text-color);
    font-size: clamp(0.9rem, 3vw, 1.2rem);
    font-weight: 600;
    max-width: 85vw;
    margin-inline: auto;
    line-height: 1.4;
    display: block;
}

.timeline {
    position: relative;
    padding: clamp(1rem, 4vw, 2rem) 0;
    max-width: min(1000px, 95vw);
    margin: 0 auto;
    box-sizing: border-box;
}

.timeline-item {
    position: relative;
    width: 100%;
    max-width: 100vw;
    padding-inline: clamp(0.75rem, 2vw, 2rem);
    box-sizing: border-box;
    min-height: 200px;
    will-change: transform, opacity;
}

.timeline-item:not(:last-child) {
    margin-bottom: 4rem;
}

.timeline-connector {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    bottom: -4rem;
    width: 2px;
    height: clamp(2.5rem, 4vw, 4rem);
    overflow: hidden;
    contain: layout style paint;
}

.timeline-connector .line {
    position: absolute;
    width: 100%;
    background: linear-gradient(to top,
        var(--accent-secondary),
        color-mix(in srgb, var(--accent-secondary) 60%, transparent)
    );
    height: 100%;
    bottom: 0;
    transform: translateY(0);
    box-shadow: 0 0 8px var(--accent-tertiary);
}

.timeline-connector .dot {
    position: absolute;
    width: clamp(6px, 1.5vw, 8px);
    height: clamp(6px, 1.5vw, 8px);
    background: var(--accent-secondary);
    border-radius: 50%;
    left: 50%;
    transform: translate(-50%, 4px);
    bottom: 0;
    box-shadow: 0 0 6px var(--accent-tertiary);
    opacity: 1;
}

.timeline-item.visible {
    transition: opacity 0.4s ease-out, transform 0.4s ease-out;
}

@media (max-width: 768px) {
    .page-header h1 {
        font-size: 1.3rem;
        margin-bottom: 0.5rem;
    }

    .page-header p {
        font-size: 0.95rem;
    }

    .timeline {
        padding-inline: 0.5rem;
    }

    .timeline-item {
        transform: translateY(10px); /* Reduz a distância da animação */
    }

    .timeline-item:not(:last-child) {
        margin-bottom: clamp(2rem, 5vw, 3rem);
    }

    .timeline-connector {
        bottom: clamp(-2.5rem, -5vw, -3rem);
        height: clamp(2.5rem, 5vw, 3rem);
    }
}

@media (max-width: 480px) {
    .timeline {
        padding-inline: 0.25rem;
    }

    .timeline-item {
        transform: translateY(8px); /* Ainda menor para mobile */
    }

    .timeline-item:not(:last-child) {
        margin-bottom: clamp(1.75rem, 4vw, 2.5rem);
    }

    .timeline-connector {
        bottom: clamp(-2rem, -4vw, -2.5rem);
        height: clamp(2rem, 4vw, 2.5rem);
        width: 1.5px; /* Linha mais fina em mobile */
    }

    .timeline-connector .dot {
        width: 5px;
        height: 5px;
    }
}

/* Otimizações para desempenho em dispositivos móveis */
@media (hover: none) and (pointer: coarse) {
    .timeline-item {
        transition: opacity 0.4s ease, transform 0.3s ease;
    }

    .timeline-connector .line {
        transition: transform 0.3s ease;
    }

    .timeline-connector .dot {
        transition: all 0.2s ease 0.1s;
    }
}

@media (prefers-reduced-motion: reduce) {
    .timeline-item,
    .timeline-connector .line,
    .timeline-connector .dot {
        transition: none !important;
    }

    .timeline-item {
        opacity: 1;
        transform: none;
    }
}
</style>

<script>
function observeTimelineItems() {
    const items = document.querySelectorAll('.timeline-item');
    
    // Define os estados iniciais
    items.forEach(item => {
        const element = item as HTMLElement;
        element.style.opacity = '0';
        element.style.transform = 'translateY(20px)';
    });

    // Anima os elementos após um pequeno delay
    setTimeout(() => {
        requestAnimationFrame(() => {
            items.forEach((item, index) => {
                const element = item as HTMLElement;
                // Aplica a animação com delay progressivo
                setTimeout(() => {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }, index * 100);
            });
        });
    }, 100);
}

document.addEventListener('astro:page-load', observeTimelineItems);
</script>

<style>
.timeline-item {
    transition: opacity 0.4s ease-out, transform 0.4s ease-out;
    opacity: 0;
    transform: translateY(20px);
    will-change: transform, opacity;
}

@media (prefers-reduced-motion: reduce) {
    .timeline-item {
        transition: none;
        opacity: 1;
        transform: none;
    }
}
</style>