---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import ExperienceCard from '../components/ExperienceCard.astro';
import { getCollection } from 'astro:content';

const experiences = await getCollection('experience');
const sortedExperiences = experiences.sort((a, b) => {
    const getDate = (period: string) => {
        const startDate = period.split(' - ')[0];
        const [month, year] = startDate.replace('de ', '').split(' ');
        const months = {
            'jan': 0, 'fev': 1, 'mar': 2, 'abr': 3, 'mai': 4, 'jun': 5,
            'jul': 6, 'ago': 7, 'set': 8, 'out': 9, 'nov': 10, 'dez': 11
        };
        return new Date(parseInt(year), months[month as keyof typeof months]);
    };

    const dateA = getDate(a.data.period);
    const dateB = getDate(b.data.period);
    return dateB.getTime() - dateA.getTime();
});

// Gerar descrição com base nas experiências mais recentes
const latestExperience = sortedExperiences[0]?.data;
const description = latestExperience
    ? `Experiência profissional como ${latestExperience.position} na ${latestExperience.company} e outras empresas do setor de tecnologia.`
    : "Experiência profissional em desenvolvimento de software e tecnologia.";
---

<Layout 
    title="Experiência Profissional - Gabriel Freitas Souza"
    description={description}
>
    <Navigation />
    
    <main id="main-content">
        <div class="page-header">
            <h1>Experiência Profissional</h1>
            <p>Minha trajetória e conquistas profissionais</p>
        </div>

        <section 
            class="timeline" 
            aria-label="Linha do tempo de experiências profissionais"
        >
            {sortedExperiences.map((exp, index) => (
                <div class="timeline-item visible" data-index={index}>
                    <ExperienceCard experience={exp.data} />
                    {index !== sortedExperiences.length - 1 && (
                        <div 
                            class="timeline-connector" 
                            role="presentation" 
                            aria-hidden="true"
                        >
                            <div class="line"></div>
                            <div class="dot"></div>
                        </div>
                    )}
                </div>
            ))}
        </section>
    </main>
</Layout>

<style>
.page-header {
    text-align: center;
    margin-bottom: 3rem;
    animation: fadeIn 0.5s ease-out;
}

.page-header h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    background: linear-gradient(135deg, var(--accent-primary) 0%, var(--accent-secondary) 100%);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    text-fill-color: transparent;
}

.page-header p {
    color: var(--accent-tertiary);
    font-size: 1.2rem;
    font-weight: 500;
}

.timeline {
    position: relative;
    padding: 2rem 0;
    max-width: 1000px;
    margin: 0 auto;
}

.timeline-item {
    position: relative;
    opacity: 0;
    transform: translateY(20px);
}

.timeline-item:not(:last-child) {
    margin-bottom: 4rem;
}

.timeline-connector {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    bottom: -4rem;
    width: 2px;
    height: 4rem;
    overflow: hidden;
}

.timeline-connector .line {
    position: absolute;
    width: 100%;
    background: linear-gradient(to top,
        var(--accent-secondary) 0%,
        color-mix(in srgb, var(--accent-secondary) 70%, transparent) 70%,
        transparent 100%
    );
    height: 100%;
    bottom: 0;
    transform: translateY(100%);
    transition: transform 0.6s ease;
    box-shadow: 0 0 10px var(--accent-tertiary);
}

.timeline-connector .dot {
    position: absolute;
    width: 8px;
    height: 8px;
    background: var(--accent-secondary);
    border-radius: 50%;
    left: 50%;
    transform: translate(-50%, 20px);
    opacity: 0;
    bottom: 0;
    transition: all 0.3s ease 0.3s;
    box-shadow: 0 0 10px var(--accent-tertiary);
}

.timeline-item.visible {
    opacity: 1;
    transform: translateY(0);
    transition: opacity 0.6s ease, transform 0.6s ease;
}

.timeline-item.visible .line {
    transform: translateY(0);
}

.timeline-item.visible .dot {
    opacity: 1;
    transform: translate(-50%, 4px);
}

@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@media (max-width: 768px) {
    .page-header h1 {
        font-size: 2rem;
    }

    .page-header p {
        font-size: 1rem;
    }

    .timeline-item:not(:last-child) {
        margin-bottom: 3rem;
    }

    .timeline-connector {
        bottom: -3rem;
        height: 3rem;
    }
}

@media (max-width: 480px) {
    .page-header h1 {
        font-size: 1.75rem;
    }

    .timeline-item:not(:last-child) {
        margin-bottom: 2.5rem;
    }

    .timeline-connector {
        bottom: -2.5rem;
        height: 2.5rem;
    }
}

@media (prefers-reduced-motion: reduce) {
    .page-header {
        animation: none;
    }

    .timeline-item,
    .timeline-connector .line,
    .timeline-connector .dot {
        transition: none !important;
    }

    .timeline-item {
        opacity: 1;
        transform: none;
    }
}
</style>

<script>
function observeTimelineItems() {
    const items = document.querySelectorAll('.timeline-item');
    
    // Se IntersectionObserver não estiver disponível, mantenha os itens visíveis
    if (!('IntersectionObserver' in window)) {
        items.forEach(item => item.classList.add('visible'));
        return;
    }

    // Remove a classe visible inicial para permitir a animação
    items.forEach(item => item.classList.remove('visible'));
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
                observer.unobserve(entry.target);
            }
        });
    }, {
        threshold: 0.2,
        rootMargin: '0px 0px -50px 0px'
    });

    items.forEach(item => {
        observer.observe(item);
    });
}

document.addEventListener('astro:page-load', observeTimelineItems);
</script>