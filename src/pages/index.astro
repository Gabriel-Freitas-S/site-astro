---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Navigation from '../components/Navigation.astro';
import SkillCard from '../components/SkillCard.astro';
import { getCollection } from 'astro:content';

export const prerender = true;

interface Technology {
    name: string;
}

interface Skill {
    title: string;
    technologies: Technology[];
}

const certifications = await getCollection('certifications');

// Agrupar todas as skills por categoria
const allSkills = new Map<string, Set<Technology>>();

certifications.forEach(cert => {
    cert.data.skills.forEach(skill => {
        if (!allSkills.has(skill.title)) {
            allSkills.set(skill.title, new Set());
        }
        skill.technologies.forEach(tech => {
            allSkills.get(skill.title)?.add(tech);
        });
    });
});

// Converter para o formato necessário para renderização
const skillCategories = Array.from(allSkills.entries()).map(([title, techs]) => ({
    title,
    technologies: Array.from(techs)
}));

const description = `Desenvolvedor de software especializado em desenvolvimento web e mobile, com experiência em diversas tecnologias e frameworks.`;
---

<Layout 
    title="Gabriel Freitas Souza - Portfolio"
    description={description}
>
    <Navigation />
    <Header />
    
    <main id="main-content">
        <section
            class="skills-section"
            aria-labelledby="skills-title"
            data-astro-transition-scope
            transition:animate={{
                forwards: {
                    old: { name: 'fadeOut', duration: '0.2s', easing: 'ease-out' },
                    new: { name: 'fadeIn', duration: '0.2s', easing: 'ease-out' }
                },
                backwards: {
                    old: { name: 'fadeOut', duration: '0.2s', easing: 'ease-out' },
                    new: { name: 'fadeIn', duration: '0.2s', easing: 'ease-out' }
                }
            }}
        >
            <h2 id="skills-title" transition:name="page-title">Habilidades</h2>
            <div class="skills-grid">
                {skillCategories.map(category => (
                    <div
                        class="skill-category lazy-load"
                        aria-labelledby={`category-${category.title.toLowerCase()}`}
                        transition:name={`category-${category.title.toLowerCase()}`}
                    >
                        <SkillCard 
                            title={category.title}
                            technologies={category.technologies}
                        />
                    </div>
                ))}
            </div>
        </section>
    </main>
</Layout>

<style>
.skills-section {
    padding: clamp(2rem, 4vw, 4rem) clamp(1rem, 2vw, 2rem);
    max-width: 1200px;
    margin: 0 auto;
}

.skills-section h2 {
    text-align: center;
    margin-bottom: clamp(1.5rem, 4vw, 2.5rem);
    font-size: clamp(1.5rem, 5vw, 2.5rem);
    background: linear-gradient(90deg, var(--accent-primary), var(--accent-secondary));
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    text-fill-color: transparent;
    line-height: 1.3;
    letter-spacing: -0.02em;
}

.skills-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(min(100%, 500px), 1fr));
    gap: clamp(1rem, 3vw, 2rem);
    width: 100%;
}

.skill-category {
    opacity: 0;
    transform: translateY(20px);
}

@media (max-width: 640px) {
    .skills-grid {
        grid-template-columns: 1fr;
    }
}

@media (prefers-reduced-motion: reduce) {
    .skill-category {
        opacity: 1;
        transform: none;
        transition: none !important;
        animation: none !important;
    }
}
</style>

<script>
function observeSkillCategories() {
    const observer = new IntersectionObserver(
        (entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    requestAnimationFrame(() => {
                        const element = entry.target as HTMLElement;
                        element.style.transition = 'opacity 0.4s ease-out, transform 0.4s ease-out';
                        element.style.opacity = '1';
                        element.style.transform = 'translateY(0)';
                    });
                    observer.unobserve(entry.target);
                }
            });
        },
        {
            threshold: 0.1,
            rootMargin: '50px'
        }
    );

    document.querySelectorAll('.lazy-load').forEach((category, index) => {
        if (category instanceof HTMLElement) {
            category.style.transitionDelay = `${index * 100}ms`;
            observer.observe(category);
        }
    });
}

document.addEventListener('astro:page-load', () => {
    if (window.matchMedia('(prefers-reduced-motion: no-preference)').matches) {
        observeSkillCategories();
    } else {
        document.querySelectorAll('.lazy-load').forEach(el => {
            if (el instanceof HTMLElement) {
                el.style.opacity = '1';
                el.style.transform = 'none';
            }
        });
    }
}, { passive: true });
</script>
