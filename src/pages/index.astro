---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Navigation from '../components/Navigation.astro';
import SkillPopup from '../components/SkillPopup.astro';
import { Icon } from 'astro-icon/components';
import '../utils/preloadIcons';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import { getSkillIcon } from '../utils/iconMapping';

export const prerender = true;

interface Skill {
    name: string;
    certs: CollectionEntry<'certifications'>[];
}

interface SkillCategory {
    title: string;
    skills: Skill[];
}

const certifications = await getCollection('certifications');

const skillCategories: SkillCategory[] = [
    {
        title: "Linguagens",
        skills: [
            { name: "TypeScript/JavaScript", certs: certifications.filter(cert => 
                cert.data.title.toLowerCase().includes('typescript') || 
                cert.data.title.toLowerCase().includes('javascript')) },
            { name: "Dart", certs: certifications.filter(cert => 
                cert.data.title.toLowerCase().includes('dart')) },
            { name: "Rust", certs: certifications.filter(cert => 
                cert.data.title.toLowerCase().includes('rust')) },
            { name: "HTML/CSS", certs: certifications.filter(cert => 
                cert.data.title.toLowerCase().includes('html') ||
                cert.data.title.toLowerCase().includes('css')) }
        ]
    },
    {
        title: "Frameworks",
        skills: [
            { name: "React", certs: certifications.filter(cert => 
                cert.data.title.toLowerCase().includes('react')) },
            { name: "Flutter", certs: certifications.filter(cert => 
                cert.data.courses.some(course => course.name.toLowerCase().includes('flutter'))) },
            { name: "Astro", certs: [] }
        ]
    },
    {
        title: "Ferramentas",
        skills: [
            { name: "Git", certs: certifications.filter(cert => 
                cert.data.title.toLowerCase().includes('git')) },
            { name: "Docker", certs: certifications.filter(cert => 
                cert.data.title.toLowerCase().includes('docker')) },
            { name: "VSCode", certs: certifications.filter(cert => 
                cert.data.title.toLowerCase().includes('vscode')) }
        ]
    }
];

const totalCertifications = skillCategories.reduce((total, category) => {
    return total + category.skills.reduce((sum, skill) => sum + skill.certs.length, 0);
}, 0);

const description = `Desenvolvedor de software especializado em desenvolvimento web e mobile, com ${totalCertifications} certificações em diversas tecnologias e frameworks.`;
---

<Layout 
    title="Gabriel Freitas Souza - Portfolio"
    description={description}
>
    <Navigation />
    <Header />
    
    <main id="main-content">
        <section
            class="skills-section"
            aria-labelledby="skills-title"
            data-astro-transition-scope
            transition:animate={{
                forwards: {
                    old: { name: 'fadeOut', duration: '0.2s', easing: 'ease-out' },
                    new: { name: 'fadeIn', duration: '0.2s', easing: 'ease-out' }
                },
                backwards: {
                    old: { name: 'fadeOut', duration: '0.2s', easing: 'ease-out' },
                    new: { name: 'fadeIn', duration: '0.2s', easing: 'ease-out' }
                }
            }}
        >
            <h2 id="skills-title" transition:name="page-title">Habilidades</h2>
            <div class="skills-grid">
                {skillCategories.map(category => (
                    <section
                        class="skill-category lazy-load"
                        aria-labelledby={`category-${category.title.toLowerCase()}`}
                        transition:name={`category-${category.title.toLowerCase()}`}
                    >
                        <div class="category-header">
                            <h3 id={`category-${category.title.toLowerCase()}`}>
                                {category.title}
                            </h3>
                        </div>
                        <ul class="skill-list" role="list">
                            {category.skills.map(skill => (
                                <li role="listitem">
                                    <button
                                        class="skill-button"
                                        onclick={`openPopup('popup-${skill.name.toLowerCase().replace(/[^a-z0-9]/g, '-')}')`}
                                        disabled={skill.certs.length === 0}
                                        aria-label={`${skill.name}${skill.certs.length > 0 ? ` - ${skill.certs.length} certificações` : ' - Sem certificações'}`}
                                        transition:name={`skill-${skill.name.toLowerCase().replace(/[^a-z0-9]/g, '-')}`}
                                    >
                                        <div class="skill-content">
                                            <span class="icon-wrapper">
                                                <Icon
                                                    name={getSkillIcon(skill.name)}
                                                    class="skill-icon"
                                                    width={20}
                                                    height={20}
                                                />
                                            </span>
                                            <span>{skill.name}</span>
                                        </div>
                                        {skill.certs.length > 0 && (
                                            <span class="cert-count" aria-hidden="true">
                                                {skill.certs.length}
                                            </span>
                                        )}
                                    </button>
                                    <SkillPopup skill={skill.name} certifications={skill.certs.map(cert => cert.data)} />
                                </li>
                            ))}
                        </ul>
                    </section>
                ))}
            </div>
        </section>
    </main>
</Layout>

<style>
.skills-section {
    padding: clamp(2rem, 4vw, 4rem) clamp(1rem, 2vw, 2rem);
    max-width: 1200px;
    margin: 0 auto;
    container-type: inline-size;
}

.skills-section h2 {
    text-align: center;
    margin-bottom: clamp(1.5rem, 4vw, 2.5rem);
    font-size: clamp(1.5rem, 5vw, 2.5rem);
    background: linear-gradient(90deg, var(--accent-primary), var(--accent-secondary));
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    text-fill-color: transparent;
    line-height: 1.3;
    letter-spacing: -0.02em;
}

.skills-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(min(280px, 100%), 1fr));
    gap: clamp(1rem, 3vw, 2rem);
    width: 100%;
    container-type: inline-size;
}

.skill-category {
    background: var(--secondary-color);
    border-radius: 12px;
    border: 1px solid var(--accent-tertiary);
    opacity: 0;
    transform: translateY(20px);
}

.category-header {
    background: var(--accent-tertiary);
    padding: clamp(0.75rem, 3vw, 1.25rem);
    border-bottom: 1px solid var(--accent-tertiary);
}

.skill-category h3 {
    font-size: clamp(1.2rem, 3vw, 1.5rem);
    color: var(--text-color);
    margin: 0;
}

.skill-list {
    list-style: none;
    padding: clamp(0.75rem, 3vw, 1.5rem);
    margin: 0;
    display: grid;
    gap: clamp(0.4rem, 2vw, 0.8rem);
}

.skill-button {
    width: 100%;
    text-align: left;
    background: var(--accent-quaternary);
    border: none;
    color: var(--text-color);
    font-weight: 500;
    font-size: clamp(0.875rem, 2.5vw, 1rem);
    padding: clamp(0.6rem, 2vw, 0.8rem) clamp(0.8rem, 2vw, 1.2rem);
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    min-height: 44px;
    touch-action: manipulation;
}

.skill-content {
    display: flex;
    align-items: center;
    gap: clamp(0.5rem, 2vw, 0.8rem);
    flex: 1;
    min-width: 0;
}

.icon-wrapper {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: clamp(16px, 4vw, 20px);
    height: clamp(16px, 4vw, 20px);
}

.skill-icon {
    color: var(--text-color);
    opacity: 0.9;
    width: 100%;
    height: 100%;
}

.cert-count {
    background: var(--accent-primary);
    color: white;
    font-weight: 600;
    padding: clamp(0.15rem, 1vw, 0.2rem) clamp(0.4rem, 2vw, 0.6rem);
    border-radius: 12px;
    font-size: clamp(0.75rem, 2vw, 0.8rem);
    min-width: 1.2rem;
    text-align: center;
}

@media (hover: hover) {
    .skill-button:not(:disabled):hover {
        background: color-mix(in srgb, var(--accent-quaternary) 95%, var(--accent-primary));
        transform: translateX(4px);
    }

    .skill-category {
        transition: transform 0.2s ease;
    }

    .skill-category:hover {
        transform: translateY(-4px);
    }
}

.skill-button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    background: rgba(var(--text-color-rgb), 0.1);
    color: var(--text-color-secondary);
}

@media (prefers-reduced-motion: reduce) {
    .skill-category,
    .skill-button {
        transition: none !important;
        animation: none !important;
        transform: none !important;
    }
    
    .skill-category {
        opacity: 1;
    }
}
</style>

<script>
function observeSkillCategories() {
    const observer = new IntersectionObserver(
        (entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    requestAnimationFrame(() => {
                        const element = entry.target as HTMLElement;
                        element.style.transition = 'opacity 0.4s ease-out, transform 0.4s ease-out';
                        element.style.opacity = '1';
                        element.style.transform = 'translateY(0)';
                    });
                    observer.unobserve(entry.target);
                }
            });
        },
        {
            threshold: 0.1,
            rootMargin: '50px'
        }
    );

    document.querySelectorAll('.lazy-load').forEach((category, index) => {
        if (category instanceof HTMLElement) {
            category.style.transitionDelay = `${index * 100}ms`;
            observer.observe(category);
        }
    });
}

document.addEventListener('astro:page-load', () => {
    if (window.matchMedia('(prefers-reduced-motion: no-preference)').matches) {
        observeSkillCategories();
    } else {
        document.querySelectorAll('.lazy-load').forEach(el => {
            if (el instanceof HTMLElement) {
                el.style.opacity = '1';
                el.style.transform = 'none';
            }
        });
    }
}, { passive: true });
</script>
