---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import CertificationCard from '../components/CertificationCard.astro';
import SearchBar from '../components/SearchBar.astro';
import { getCollection } from 'astro:content';

const certifications = await getCollection('certifications');
const sortedCertifications = certifications.sort((a, b) => {
    const getHours = (duration: string) => parseInt(duration.replace('h', ''));
    const totalA = getHours(a.data.duration);
    const totalB = getHours(b.data.duration);
    return totalB - totalA;
});

const totalHours = sortedCertifications.reduce((acc, cert) => {
    const hours = parseInt(cert.data.duration.replace('h', ''));
    return acc + hours;
}, 0);

const description = `Certificações e cursos em desenvolvimento de software, totalizando ${totalHours} horas de estudo em diversas tecnologias e frameworks.`;

// Recuperar o filtro da URL se existir
const url = new URL(Astro.request.url);
const skillFilter = url.searchParams.get('skill');

export const prerender = true;
---

<Layout 
    title="Certificações - Gabriel Freitas Souza"
    description={description}
>
    <Navigation />
    
    <main id="main-content">
        <div class="page-header">
            <h1 transition:name="page-title">Certificações</h1>
            <p class="header-description" transition:name="page-description">
                Total de {totalHours} horas de estudo e aperfeiçoamento profissional
            </p>
        </div>

        <SearchBar initialSearchTerm={skillFilter} />

        <section
            class="certifications-grid"
            aria-label="Lista de certificações"
            data-initial-filter={skillFilter}
        >
            {sortedCertifications.map((certification, index) => (
                <div
                    class="card-wrapper"
                    data-index={index}
                    style={`--delay: ${index * 100}ms`}
                >
                    <CertificationCard certification={certification.data} />
                </div>
            ))}
            <p class="no-results hidden">Nenhuma certificação encontrada.</p>
        </section>
    </main>
</Layout>

<style>
.page-header {
    text-align: center;
    margin-block: 2rem 3rem;
    container-type: inline-size;
}

.page-header h1 {
    font-size: clamp(1.5rem, 5cqi, 2.5rem);
    margin-bottom: 0.75rem;
    background: linear-gradient(90deg, var(--accent-primary), var(--accent-secondary));
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    text-fill-color: transparent;
    line-height: 1.3;
}

.header-description {
    color: var(--text-color);
    font-size: clamp(0.9rem, 3cqi, 1.2rem);
    font-weight: 600;
    line-height: 1.4;
    max-width: min(85vw, 600px);
    margin-inline: auto;
}

.certifications-grid {
    display: grid;
    gap: clamp(1rem, 3vw, 2rem);
    margin-block-end: 3rem;
    width: 100%;
    container-type: inline-size;
}

.card-wrapper {
    container-type: inline-size;
    container-name: card;
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.4s ease-out var(--delay), transform 0.4s ease-out var(--delay);
}

@container certifications-grid (min-width: 768px) {
    .certifications-grid {
        grid-template-columns: repeat(auto-fill, minmax(min(100%, 500px), 1fr));
    }
}

/* Ajustes para tema claro */
:global(.light-theme) .header-description {
    color: var(--text-color);
    font-weight: 600;
}

/* Estilos de carregamento progressivo */
.card-wrapper.visible {
    opacity: 1;
    transform: translateY(0);
}

.no-results {
    text-align: center;
    padding: 2rem;
    color: var(--text-color);
    opacity: 0.8;
    font-size: 1.1rem;
    grid-column: 1 / -1;
}

.hidden {
    display: none !important;
}
</style>

<script>
interface Certification {
    title: string;
    skills: {
        title: string;
        technologies: {
            name: string;
        }[];
    }[];
    courses: {
        name: string;
        period?: string;
        duration: string;
    }[];
    complementaryContent?: {
        name: string;
        duration: string;
    }[];
}

function shouldShowCard(searchTerm: string, certification: Certification): boolean {
    if (!searchTerm) return true;

    const searchTermLower = searchTerm.toLowerCase();

    // Verificar título
    if (certification.title.toLowerCase().includes(searchTermLower)) return true;

    // Verificar skills
    const hasSkillMatch = certification.skills.some(skill =>
        skill.technologies.some(tech => tech.name.toLowerCase().includes(searchTermLower))
    );
    if (hasSkillMatch) return true;

    // Verificar cursos
    const hasCourseMatch = certification.courses.some(course =>
        course.name.toLowerCase().includes(searchTermLower)
    );
    if (hasCourseMatch) return true;

    // Verificar conteúdo complementar
    if (certification.complementaryContent?.some(content =>
        content.name.toLowerCase().includes(searchTermLower)
    )) return true;

    return false;
}

function filterCertifications(searchTerm: string) {
    console.log('Filtrando certificações com termo:', searchTerm); // Debug

    // Se não houver termo de busca, mostrar todos os cards
    if (!searchTerm) {
        document.querySelectorAll('.card-wrapper').forEach(wrapper => {
            wrapper.classList.remove('hidden');
        });
        document.querySelector('.no-results')?.classList.add('hidden');

        // Limpar destaques
        const event = new CustomEvent('globalSearch', {
            bubbles: true,
            detail: { searchTerm: '' }
        });
        document.dispatchEvent(event);
        return;
    }

    // Filtrar cards
    const grid = document.querySelector('.certifications-grid');
    const cards = document.querySelectorAll<HTMLElement>('.certification-card');
    let visibleCount = 0;

    cards.forEach(card => {
        if (!card.dataset.certification) return;

        try {
            const certification: Certification = JSON.parse(card.dataset.certification);
            const shouldShow = shouldShowCard(searchTerm, certification);
            const wrapper = card.closest('.card-wrapper');
            if (wrapper) {
                wrapper.classList.toggle('hidden', !shouldShow);
                if (shouldShow) visibleCount++;
            }
        } catch (error) {
            console.error('Erro ao processar certificação:', error);
        }
    });

    // Atualizar mensagem de resultados
    const noResults = grid?.querySelector('.no-results');
    if (noResults) {
        noResults.classList.toggle('hidden', visibleCount > 0);
    }

    // Disparar evento de busca para destacar conteúdo
    requestAnimationFrame(() => {
        const event = new CustomEvent('globalSearch', {
            bubbles: true,
            detail: { searchTerm: searchTerm.toLowerCase() }
        });
        document.dispatchEvent(event);
    });
}

function initializeCertificationsPage() {
    // Lazy loading dos cards
    const observer = new IntersectionObserver(
        (entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    const target = entry.target as HTMLElement;
                    requestAnimationFrame(() => {
                        target.classList.add('visible');
                    });
                    observer.unobserve(target);
                }
            });
        },
        {
            threshold: 0.1,
            rootMargin: '50px'
        }
    );

    // Observar cards para lazy loading
    document.querySelectorAll('.card-wrapper').forEach(card => {
        observer.observe(card);
    });

    // Se houver um filtro inicial, aplicá-lo após carregar a página
    const grid = document.querySelector<HTMLElement>('.certifications-grid');
    const initialFilter = grid?.dataset.initialFilter;

    // Aguardar um pouco para garantir que a página foi carregada
    if (initialFilter) {
        setTimeout(() => {
            console.log('Aplicando filtro inicial:', initialFilter); // Debug
            filterCertifications(initialFilter);
            
            // Atualizar input de busca
            const searchInput = document.querySelector<HTMLInputElement>('#certification-search');
            if (searchInput) searchInput.value = initialFilter;
        }, 100);
    }

    // Ouvir mudanças de navegação
    document.addEventListener('astro:after-navigation', () => {
        const params = new URLSearchParams(window.location.search);
        const skillFilter = params.get('skill');
        if (skillFilter) {
            console.log('Navegação detectada, aplicando filtro:', skillFilter); // Debug
            filterCertifications(skillFilter);
        }
    });
}

// Inicializar em diferentes eventos do Astro
document.addEventListener('astro:page-load', () => {
    console.log('Inicializando página...'); // Debug
    initializeCertificationsPage();
});

document.addEventListener('astro:after-swap', () => {
    console.log('Reinicializando após navegação...'); // Debug
    initializeCertificationsPage();
});
</script>