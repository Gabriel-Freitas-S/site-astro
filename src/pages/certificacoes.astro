---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import CertificationCard from '../components/CertificationCard.astro';
import SearchBar from '../components/SearchBar.astro';
import { getCollection } from 'astro:content';

const certifications = await getCollection('certifications');
const sortedCertifications = certifications.sort((a, b) => {
    const getHours = (duration: string) => parseInt(duration.replace('h', ''));
    const totalA = getHours(a.data.duration);
    const totalB = getHours(b.data.duration);
    return totalB - totalA;
});

const totalHours = sortedCertifications.reduce((acc, cert) => {
    const hours = parseInt(cert.data.duration.replace('h', ''));
    return acc + hours;
}, 0);

const description = `Certificações e cursos em desenvolvimento de software, totalizando ${totalHours} horas de estudo em diversas tecnologias e frameworks.`;

// Recuperar o filtro da URL se existir
const url = new URL(Astro.request.url);
const skillFilter = url.searchParams.get('skill');

export const prerender = true;
---

<Layout 
    title="Certificações - Gabriel Freitas Souza"
    description={description}
>
    <Navigation />
    
    <main id="main-content">
        <div
            class="page-header"
            transition:animate={{
                forwards: {
                    old: { name: 'fadeOut', duration: '0.2s', easing: 'ease-out' },
                    new: { name: 'fadeIn', duration: '0.2s', easing: 'ease-out' }
                },
                backwards: {
                    old: { name: 'fadeOut', duration: '0.2s', easing: 'ease-out' },
                    new: { name: 'fadeIn', duration: '0.2s', easing: 'ease-out' }
                }
            }}
        >
            <h1 transition:name="page-title">Certificações</h1>
            <p class="header-description" transition:name="page-description">
                Total de {totalHours} horas de estudo e aperfeiçoamento profissional
            </p>
        </div>

        <SearchBar />

        <section
            class="certifications-grid"
            aria-label="Lista de certificações"
            style="contain: content;"
            data-skill-filter={skillFilter}
        >
            {sortedCertifications.map((certification, index) => (
                <div
                    class="card-wrapper lazy-load"
                    style={`view-transition-name: cert-${index}; contain: layout;`}
                    data-index={index}
                >
                    <CertificationCard certification={certification.data} />
                </div>
            ))}
        </section>
    </main>
</Layout>

<style>
.page-header {
    text-align: center;
    margin-block: 2rem 3rem;
    container-type: inline-size;
}

.page-header h1 {
    font-size: clamp(1.5rem, 5cqi, 2.5rem);
    margin-bottom: 0.75rem;
    background: linear-gradient(90deg, var(--accent-primary), var(--accent-secondary));
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    text-fill-color: transparent;
    line-height: 1.3;
}

.header-description {
    color: var(--text-color);
    font-size: clamp(0.9rem, 3cqi, 1.2rem);
    font-weight: 600;
    line-height: 1.4;
    max-width: min(85vw, 600px);
    margin-inline: auto;
}

.certifications-grid {
    display: grid;
    gap: clamp(1rem, 3vw, 2rem);
    margin-block-end: 3rem;
    width: 100%;
    container-type: inline-size;
}

.card-wrapper {
    container-type: inline-size;
    container-name: card;
}

@container certifications-grid (min-width: 768px) {
    .certifications-grid {
        grid-template-columns: repeat(auto-fill, minmax(min(100%, 500px), 1fr));
    }
}

@media (prefers-reduced-motion: reduce) {
    .page-header,
    .certifications-grid {
        animation: none !important;
        transition: none !important;
    }
}

/* Ajustes para tema claro */
:global(.light-theme) .header-description {
    color: var(--text-color);
    font-weight: 600;
}

/* Estilos de carregamento progressivo */
.card-wrapper {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.4s ease-out, transform 0.4s ease-out;
}

.card-wrapper.visible {
    opacity: 1;
    transform: translateY(0);
}

.hidden {
    display: none !important;
}
</style>

<script>
function initializeCertificationsPage() {
    const observer = new IntersectionObserver(
        (entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting && entry.target instanceof HTMLElement) {
                    const index = entry.target.dataset.index ? parseInt(entry.target.dataset.index) : 0;
                    
                    requestAnimationFrame(() => {
                        if (entry.target instanceof HTMLElement) {
                            entry.target.style.transitionDelay = `${index * 100}ms`;
                            entry.target.classList.add('visible');

                            // Limpar o delay após a animação
                            entry.target.addEventListener('transitionend', () => {
                                if (entry.target instanceof HTMLElement) {
                                    entry.target.style.transitionDelay = '';
                                }
                            }, { once: true });
                        }
                    });
                    
                    observer.unobserve(entry.target);
                }
            });
        },
        {
            threshold: 0.1,
            rootMargin: '50px'
        }
    );

    // Observar os cards para lazy loading
    document.querySelectorAll('.card-wrapper').forEach(card => {
        observer.observe(card);
    });
}

// Inicializar em diferentes eventos do Astro
document.addEventListener('astro:page-load', initializeCertificationsPage);
document.addEventListener('astro:after-swap', initializeCertificationsPage);
</script>